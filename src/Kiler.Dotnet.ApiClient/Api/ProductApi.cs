/*
 * Kiler API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Kiler.Dotnet.ApiClient.Client;
using Kiler.Dotnet.ApiClient.Model;

namespace Kiler.Dotnet.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceFavoriteRequest"> (optional)</param>
        /// <returns>RestResultOfProductServiceFavoriteListResponse</returns>
        RestResultOfProductServiceFavoriteListResponse ApiProductAddToFavoriteListPost(ProductServiceFavoriteRequest productServiceFavoriteRequest = default(ProductServiceFavoriteRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceFavoriteRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfProductServiceFavoriteListResponse</returns>
        ApiResponse<RestResultOfProductServiceFavoriteListResponse> ApiProductAddToFavoriteListPostWithHttpInfo(ProductServiceFavoriteRequest productServiceFavoriteRequest = default(ProductServiceFavoriteRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceFavoriteRequest"> (optional)</param>
        /// <returns>RestResultOfProductServiceFavoriteListResponse</returns>
        RestResultOfProductServiceFavoriteListResponse ApiProductDeleteFavoriteDelete(ProductServiceFavoriteRequest productServiceFavoriteRequest = default(ProductServiceFavoriteRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceFavoriteRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfProductServiceFavoriteListResponse</returns>
        ApiResponse<RestResultOfProductServiceFavoriteListResponse> ApiProductDeleteFavoriteDeleteWithHttpInfo(ProductServiceFavoriteRequest productServiceFavoriteRequest = default(ProductServiceFavoriteRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RestResultOfProductServiceFavoriteListResponse</returns>
        RestResultOfProductServiceFavoriteListResponse ApiProductGetFavoriteListPost();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RestResultOfProductServiceFavoriteListResponse</returns>
        ApiResponse<RestResultOfProductServiceFavoriteListResponse> ApiProductGetFavoriteListPostWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productErpId"></param>
        /// <param name="imagetype"></param>
        /// <returns></returns>
        void ApiProductImage2ProductErpIdImagetypeGet(string productErpId, int imagetype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productErpId"></param>
        /// <param name="imagetype"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiProductImage2ProductErpIdImagetypeGetWithHttpInfo(string productErpId, int imagetype);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceProductRequest"> (optional)</param>
        /// <returns>RestResultOfProductServiceRProduct</returns>
        RestResultOfProductServiceRProduct ApiProductPost(ProductServiceProductRequest productServiceProductRequest = default(ProductServiceProductRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceProductRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfProductServiceRProduct</returns>
        ApiResponse<RestResultOfProductServiceRProduct> ApiProductPostWithHttpInfo(ProductServiceProductRequest productServiceProductRequest = default(ProductServiceProductRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceProductAlternativesRequest"> (optional)</param>
        /// <returns>RestResultOfListOfProductServiceRProduct</returns>
        RestResultOfListOfProductServiceRProduct ApiProductProductAlternativesPost(ProductServiceProductAlternativesRequest productServiceProductAlternativesRequest = default(ProductServiceProductAlternativesRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceProductAlternativesRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfListOfProductServiceRProduct</returns>
        ApiResponse<RestResultOfListOfProductServiceRProduct> ApiProductProductAlternativesPostWithHttpInfo(ProductServiceProductAlternativesRequest productServiceProductAlternativesRequest = default(ProductServiceProductAlternativesRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RestResultOfListOfProductServiceRProduct</returns>
        RestResultOfListOfProductServiceRProduct ApiProductProductListPost();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RestResultOfListOfProductServiceRProduct</returns>
        ApiResponse<RestResultOfListOfProductServiceRProduct> ApiProductProductListPostWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceSearchProductRequest"> (optional)</param>
        /// <returns>RestResultOfListOfProductServiceRProduct</returns>
        RestResultOfListOfProductServiceRProduct ApiProductProductSearchPost(ProductServiceSearchProductRequest productServiceSearchProductRequest = default(ProductServiceSearchProductRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceSearchProductRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfListOfProductServiceRProduct</returns>
        ApiResponse<RestResultOfListOfProductServiceRProduct> ApiProductProductSearchPostWithHttpInfo(ProductServiceSearchProductRequest productServiceSearchProductRequest = default(ProductServiceSearchProductRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceRecommendProductRequest"> (optional)</param>
        /// <returns>RestResultOfProductServiceRecommendProductResponse</returns>
        RestResultOfProductServiceRecommendProductResponse ApiProductRecommendProductPost(ProductServiceRecommendProductRequest productServiceRecommendProductRequest = default(ProductServiceRecommendProductRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceRecommendProductRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfProductServiceRecommendProductResponse</returns>
        ApiResponse<RestResultOfProductServiceRecommendProductResponse> ApiProductRecommendProductPostWithHttpInfo(ProductServiceRecommendProductRequest productServiceRecommendProductRequest = default(ProductServiceRecommendProductRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceFavoriteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfProductServiceFavoriteListResponse</returns>
        System.Threading.Tasks.Task<RestResultOfProductServiceFavoriteListResponse> ApiProductAddToFavoriteListPostAsync(ProductServiceFavoriteRequest productServiceFavoriteRequest = default(ProductServiceFavoriteRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceFavoriteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfProductServiceFavoriteListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfProductServiceFavoriteListResponse>> ApiProductAddToFavoriteListPostWithHttpInfoAsync(ProductServiceFavoriteRequest productServiceFavoriteRequest = default(ProductServiceFavoriteRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceFavoriteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfProductServiceFavoriteListResponse</returns>
        System.Threading.Tasks.Task<RestResultOfProductServiceFavoriteListResponse> ApiProductDeleteFavoriteDeleteAsync(ProductServiceFavoriteRequest productServiceFavoriteRequest = default(ProductServiceFavoriteRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceFavoriteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfProductServiceFavoriteListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfProductServiceFavoriteListResponse>> ApiProductDeleteFavoriteDeleteWithHttpInfoAsync(ProductServiceFavoriteRequest productServiceFavoriteRequest = default(ProductServiceFavoriteRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfProductServiceFavoriteListResponse</returns>
        System.Threading.Tasks.Task<RestResultOfProductServiceFavoriteListResponse> ApiProductGetFavoriteListPostAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfProductServiceFavoriteListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfProductServiceFavoriteListResponse>> ApiProductGetFavoriteListPostWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productErpId"></param>
        /// <param name="imagetype"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiProductImage2ProductErpIdImagetypeGetAsync(string productErpId, int imagetype, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productErpId"></param>
        /// <param name="imagetype"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiProductImage2ProductErpIdImagetypeGetWithHttpInfoAsync(string productErpId, int imagetype, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceProductRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfProductServiceRProduct</returns>
        System.Threading.Tasks.Task<RestResultOfProductServiceRProduct> ApiProductPostAsync(ProductServiceProductRequest productServiceProductRequest = default(ProductServiceProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceProductRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfProductServiceRProduct)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfProductServiceRProduct>> ApiProductPostWithHttpInfoAsync(ProductServiceProductRequest productServiceProductRequest = default(ProductServiceProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceProductAlternativesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfListOfProductServiceRProduct</returns>
        System.Threading.Tasks.Task<RestResultOfListOfProductServiceRProduct> ApiProductProductAlternativesPostAsync(ProductServiceProductAlternativesRequest productServiceProductAlternativesRequest = default(ProductServiceProductAlternativesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceProductAlternativesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfListOfProductServiceRProduct)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfListOfProductServiceRProduct>> ApiProductProductAlternativesPostWithHttpInfoAsync(ProductServiceProductAlternativesRequest productServiceProductAlternativesRequest = default(ProductServiceProductAlternativesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfListOfProductServiceRProduct</returns>
        System.Threading.Tasks.Task<RestResultOfListOfProductServiceRProduct> ApiProductProductListPostAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfListOfProductServiceRProduct)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfListOfProductServiceRProduct>> ApiProductProductListPostWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceSearchProductRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfListOfProductServiceRProduct</returns>
        System.Threading.Tasks.Task<RestResultOfListOfProductServiceRProduct> ApiProductProductSearchPostAsync(ProductServiceSearchProductRequest productServiceSearchProductRequest = default(ProductServiceSearchProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceSearchProductRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfListOfProductServiceRProduct)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfListOfProductServiceRProduct>> ApiProductProductSearchPostWithHttpInfoAsync(ProductServiceSearchProductRequest productServiceSearchProductRequest = default(ProductServiceSearchProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceRecommendProductRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfProductServiceRecommendProductResponse</returns>
        System.Threading.Tasks.Task<RestResultOfProductServiceRecommendProductResponse> ApiProductRecommendProductPostAsync(ProductServiceRecommendProductRequest productServiceRecommendProductRequest = default(ProductServiceRecommendProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceRecommendProductRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfProductServiceRecommendProductResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfProductServiceRecommendProductResponse>> ApiProductRecommendProductPostWithHttpInfoAsync(ProductServiceRecommendProductRequest productServiceRecommendProductRequest = default(ProductServiceRecommendProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductApi : IProductApiSync, IProductApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductApi : IProductApi
    {
        private Kiler.Dotnet.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductApi(string basePath)
        {
            this.Configuration = Kiler.Dotnet.ApiClient.Client.Configuration.MergeConfigurations(
                Kiler.Dotnet.ApiClient.Client.GlobalConfiguration.Instance,
                new Kiler.Dotnet.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Kiler.Dotnet.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kiler.Dotnet.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Kiler.Dotnet.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductApi(Kiler.Dotnet.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Kiler.Dotnet.ApiClient.Client.Configuration.MergeConfigurations(
                Kiler.Dotnet.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Kiler.Dotnet.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kiler.Dotnet.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Kiler.Dotnet.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProductApi(Kiler.Dotnet.ApiClient.Client.ISynchronousClient client, Kiler.Dotnet.ApiClient.Client.IAsynchronousClient asyncClient, Kiler.Dotnet.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Kiler.Dotnet.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Kiler.Dotnet.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Kiler.Dotnet.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Kiler.Dotnet.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Kiler.Dotnet.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceFavoriteRequest"> (optional)</param>
        /// <returns>RestResultOfProductServiceFavoriteListResponse</returns>
        public RestResultOfProductServiceFavoriteListResponse ApiProductAddToFavoriteListPost(ProductServiceFavoriteRequest productServiceFavoriteRequest = default(ProductServiceFavoriteRequest))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfProductServiceFavoriteListResponse> localVarResponse = ApiProductAddToFavoriteListPostWithHttpInfo(productServiceFavoriteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceFavoriteRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfProductServiceFavoriteListResponse</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfProductServiceFavoriteListResponse> ApiProductAddToFavoriteListPostWithHttpInfo(ProductServiceFavoriteRequest productServiceFavoriteRequest = default(ProductServiceFavoriteRequest))
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productServiceFavoriteRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RestResultOfProductServiceFavoriteListResponse>("/api/Product/AddToFavoriteList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiProductAddToFavoriteListPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceFavoriteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfProductServiceFavoriteListResponse</returns>
        public async System.Threading.Tasks.Task<RestResultOfProductServiceFavoriteListResponse> ApiProductAddToFavoriteListPostAsync(ProductServiceFavoriteRequest productServiceFavoriteRequest = default(ProductServiceFavoriteRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfProductServiceFavoriteListResponse> localVarResponse = await ApiProductAddToFavoriteListPostWithHttpInfoAsync(productServiceFavoriteRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceFavoriteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfProductServiceFavoriteListResponse)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfProductServiceFavoriteListResponse>> ApiProductAddToFavoriteListPostWithHttpInfoAsync(ProductServiceFavoriteRequest productServiceFavoriteRequest = default(ProductServiceFavoriteRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productServiceFavoriteRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestResultOfProductServiceFavoriteListResponse>("/api/Product/AddToFavoriteList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiProductAddToFavoriteListPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceFavoriteRequest"> (optional)</param>
        /// <returns>RestResultOfProductServiceFavoriteListResponse</returns>
        public RestResultOfProductServiceFavoriteListResponse ApiProductDeleteFavoriteDelete(ProductServiceFavoriteRequest productServiceFavoriteRequest = default(ProductServiceFavoriteRequest))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfProductServiceFavoriteListResponse> localVarResponse = ApiProductDeleteFavoriteDeleteWithHttpInfo(productServiceFavoriteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceFavoriteRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfProductServiceFavoriteListResponse</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfProductServiceFavoriteListResponse> ApiProductDeleteFavoriteDeleteWithHttpInfo(ProductServiceFavoriteRequest productServiceFavoriteRequest = default(ProductServiceFavoriteRequest))
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productServiceFavoriteRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<RestResultOfProductServiceFavoriteListResponse>("/api/Product/DeleteFavorite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiProductDeleteFavoriteDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceFavoriteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfProductServiceFavoriteListResponse</returns>
        public async System.Threading.Tasks.Task<RestResultOfProductServiceFavoriteListResponse> ApiProductDeleteFavoriteDeleteAsync(ProductServiceFavoriteRequest productServiceFavoriteRequest = default(ProductServiceFavoriteRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfProductServiceFavoriteListResponse> localVarResponse = await ApiProductDeleteFavoriteDeleteWithHttpInfoAsync(productServiceFavoriteRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceFavoriteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfProductServiceFavoriteListResponse)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfProductServiceFavoriteListResponse>> ApiProductDeleteFavoriteDeleteWithHttpInfoAsync(ProductServiceFavoriteRequest productServiceFavoriteRequest = default(ProductServiceFavoriteRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productServiceFavoriteRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RestResultOfProductServiceFavoriteListResponse>("/api/Product/DeleteFavorite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiProductDeleteFavoriteDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RestResultOfProductServiceFavoriteListResponse</returns>
        public RestResultOfProductServiceFavoriteListResponse ApiProductGetFavoriteListPost()
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfProductServiceFavoriteListResponse> localVarResponse = ApiProductGetFavoriteListPostWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RestResultOfProductServiceFavoriteListResponse</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfProductServiceFavoriteListResponse> ApiProductGetFavoriteListPostWithHttpInfo()
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RestResultOfProductServiceFavoriteListResponse>("/api/Product/GetFavoriteList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiProductGetFavoriteListPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfProductServiceFavoriteListResponse</returns>
        public async System.Threading.Tasks.Task<RestResultOfProductServiceFavoriteListResponse> ApiProductGetFavoriteListPostAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfProductServiceFavoriteListResponse> localVarResponse = await ApiProductGetFavoriteListPostWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfProductServiceFavoriteListResponse)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfProductServiceFavoriteListResponse>> ApiProductGetFavoriteListPostWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestResultOfProductServiceFavoriteListResponse>("/api/Product/GetFavoriteList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiProductGetFavoriteListPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productErpId"></param>
        /// <param name="imagetype"></param>
        /// <returns></returns>
        public void ApiProductImage2ProductErpIdImagetypeGet(string productErpId, int imagetype)
        {
            ApiProductImage2ProductErpIdImagetypeGetWithHttpInfo(productErpId, imagetype);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productErpId"></param>
        /// <param name="imagetype"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<Object> ApiProductImage2ProductErpIdImagetypeGetWithHttpInfo(string productErpId, int imagetype)
        {
            // verify the required parameter 'productErpId' is set
            if (productErpId == null)
            {
                throw new Kiler.Dotnet.ApiClient.Client.ApiException(400, "Missing required parameter 'productErpId' when calling ProductApi->ApiProductImage2ProductErpIdImagetypeGet");
            }

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productErpId", Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToString(productErpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imagetype", Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToString(imagetype)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/Product/image2/{productErpId}/{imagetype}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiProductImage2ProductErpIdImagetypeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productErpId"></param>
        /// <param name="imagetype"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiProductImage2ProductErpIdImagetypeGetAsync(string productErpId, int imagetype, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiProductImage2ProductErpIdImagetypeGetWithHttpInfoAsync(productErpId, imagetype, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productErpId"></param>
        /// <param name="imagetype"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<Object>> ApiProductImage2ProductErpIdImagetypeGetWithHttpInfoAsync(string productErpId, int imagetype, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productErpId' is set
            if (productErpId == null)
            {
                throw new Kiler.Dotnet.ApiClient.Client.ApiException(400, "Missing required parameter 'productErpId' when calling ProductApi->ApiProductImage2ProductErpIdImagetypeGet");
            }


            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productErpId", Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToString(productErpId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imagetype", Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToString(imagetype)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/Product/image2/{productErpId}/{imagetype}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiProductImage2ProductErpIdImagetypeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceProductRequest"> (optional)</param>
        /// <returns>RestResultOfProductServiceRProduct</returns>
        public RestResultOfProductServiceRProduct ApiProductPost(ProductServiceProductRequest productServiceProductRequest = default(ProductServiceProductRequest))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfProductServiceRProduct> localVarResponse = ApiProductPostWithHttpInfo(productServiceProductRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceProductRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfProductServiceRProduct</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfProductServiceRProduct> ApiProductPostWithHttpInfo(ProductServiceProductRequest productServiceProductRequest = default(ProductServiceProductRequest))
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productServiceProductRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RestResultOfProductServiceRProduct>("/api/Product", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiProductPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceProductRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfProductServiceRProduct</returns>
        public async System.Threading.Tasks.Task<RestResultOfProductServiceRProduct> ApiProductPostAsync(ProductServiceProductRequest productServiceProductRequest = default(ProductServiceProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfProductServiceRProduct> localVarResponse = await ApiProductPostWithHttpInfoAsync(productServiceProductRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceProductRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfProductServiceRProduct)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfProductServiceRProduct>> ApiProductPostWithHttpInfoAsync(ProductServiceProductRequest productServiceProductRequest = default(ProductServiceProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productServiceProductRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestResultOfProductServiceRProduct>("/api/Product", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiProductPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceProductAlternativesRequest"> (optional)</param>
        /// <returns>RestResultOfListOfProductServiceRProduct</returns>
        public RestResultOfListOfProductServiceRProduct ApiProductProductAlternativesPost(ProductServiceProductAlternativesRequest productServiceProductAlternativesRequest = default(ProductServiceProductAlternativesRequest))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfListOfProductServiceRProduct> localVarResponse = ApiProductProductAlternativesPostWithHttpInfo(productServiceProductAlternativesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceProductAlternativesRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfListOfProductServiceRProduct</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfListOfProductServiceRProduct> ApiProductProductAlternativesPostWithHttpInfo(ProductServiceProductAlternativesRequest productServiceProductAlternativesRequest = default(ProductServiceProductAlternativesRequest))
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productServiceProductAlternativesRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RestResultOfListOfProductServiceRProduct>("/api/Product/ProductAlternatives", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiProductProductAlternativesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceProductAlternativesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfListOfProductServiceRProduct</returns>
        public async System.Threading.Tasks.Task<RestResultOfListOfProductServiceRProduct> ApiProductProductAlternativesPostAsync(ProductServiceProductAlternativesRequest productServiceProductAlternativesRequest = default(ProductServiceProductAlternativesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfListOfProductServiceRProduct> localVarResponse = await ApiProductProductAlternativesPostWithHttpInfoAsync(productServiceProductAlternativesRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceProductAlternativesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfListOfProductServiceRProduct)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfListOfProductServiceRProduct>> ApiProductProductAlternativesPostWithHttpInfoAsync(ProductServiceProductAlternativesRequest productServiceProductAlternativesRequest = default(ProductServiceProductAlternativesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productServiceProductAlternativesRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestResultOfListOfProductServiceRProduct>("/api/Product/ProductAlternatives", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiProductProductAlternativesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RestResultOfListOfProductServiceRProduct</returns>
        public RestResultOfListOfProductServiceRProduct ApiProductProductListPost()
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfListOfProductServiceRProduct> localVarResponse = ApiProductProductListPostWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RestResultOfListOfProductServiceRProduct</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfListOfProductServiceRProduct> ApiProductProductListPostWithHttpInfo()
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RestResultOfListOfProductServiceRProduct>("/api/Product/ProductList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiProductProductListPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfListOfProductServiceRProduct</returns>
        public async System.Threading.Tasks.Task<RestResultOfListOfProductServiceRProduct> ApiProductProductListPostAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfListOfProductServiceRProduct> localVarResponse = await ApiProductProductListPostWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfListOfProductServiceRProduct)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfListOfProductServiceRProduct>> ApiProductProductListPostWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestResultOfListOfProductServiceRProduct>("/api/Product/ProductList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiProductProductListPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceSearchProductRequest"> (optional)</param>
        /// <returns>RestResultOfListOfProductServiceRProduct</returns>
        public RestResultOfListOfProductServiceRProduct ApiProductProductSearchPost(ProductServiceSearchProductRequest productServiceSearchProductRequest = default(ProductServiceSearchProductRequest))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfListOfProductServiceRProduct> localVarResponse = ApiProductProductSearchPostWithHttpInfo(productServiceSearchProductRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceSearchProductRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfListOfProductServiceRProduct</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfListOfProductServiceRProduct> ApiProductProductSearchPostWithHttpInfo(ProductServiceSearchProductRequest productServiceSearchProductRequest = default(ProductServiceSearchProductRequest))
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productServiceSearchProductRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RestResultOfListOfProductServiceRProduct>("/api/Product/ProductSearch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiProductProductSearchPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceSearchProductRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfListOfProductServiceRProduct</returns>
        public async System.Threading.Tasks.Task<RestResultOfListOfProductServiceRProduct> ApiProductProductSearchPostAsync(ProductServiceSearchProductRequest productServiceSearchProductRequest = default(ProductServiceSearchProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfListOfProductServiceRProduct> localVarResponse = await ApiProductProductSearchPostWithHttpInfoAsync(productServiceSearchProductRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceSearchProductRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfListOfProductServiceRProduct)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfListOfProductServiceRProduct>> ApiProductProductSearchPostWithHttpInfoAsync(ProductServiceSearchProductRequest productServiceSearchProductRequest = default(ProductServiceSearchProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productServiceSearchProductRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestResultOfListOfProductServiceRProduct>("/api/Product/ProductSearch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiProductProductSearchPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceRecommendProductRequest"> (optional)</param>
        /// <returns>RestResultOfProductServiceRecommendProductResponse</returns>
        public RestResultOfProductServiceRecommendProductResponse ApiProductRecommendProductPost(ProductServiceRecommendProductRequest productServiceRecommendProductRequest = default(ProductServiceRecommendProductRequest))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfProductServiceRecommendProductResponse> localVarResponse = ApiProductRecommendProductPostWithHttpInfo(productServiceRecommendProductRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceRecommendProductRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfProductServiceRecommendProductResponse</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfProductServiceRecommendProductResponse> ApiProductRecommendProductPostWithHttpInfo(ProductServiceRecommendProductRequest productServiceRecommendProductRequest = default(ProductServiceRecommendProductRequest))
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productServiceRecommendProductRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RestResultOfProductServiceRecommendProductResponse>("/api/Product/RecommendProduct", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiProductRecommendProductPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceRecommendProductRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfProductServiceRecommendProductResponse</returns>
        public async System.Threading.Tasks.Task<RestResultOfProductServiceRecommendProductResponse> ApiProductRecommendProductPostAsync(ProductServiceRecommendProductRequest productServiceRecommendProductRequest = default(ProductServiceRecommendProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfProductServiceRecommendProductResponse> localVarResponse = await ApiProductRecommendProductPostWithHttpInfoAsync(productServiceRecommendProductRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productServiceRecommendProductRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfProductServiceRecommendProductResponse)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfProductServiceRecommendProductResponse>> ApiProductRecommendProductPostWithHttpInfoAsync(ProductServiceRecommendProductRequest productServiceRecommendProductRequest = default(ProductServiceRecommendProductRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productServiceRecommendProductRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestResultOfProductServiceRecommendProductResponse>("/api/Product/RecommendProduct", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiProductRecommendProductPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
