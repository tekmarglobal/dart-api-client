/*
 * Kiler API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Kiler.Dotnet.ApiClient.Client;
using Kiler.Dotnet.ApiClient.Model;

namespace Kiler.Dotnet.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceCheckoutRequest"> (optional)</param>
        /// <returns>RestResultOfListOfOrderServiceCheckoutItem</returns>
        RestResultOfListOfOrderServiceCheckoutItem ApiOrderCheckoutPost(OrderServiceCheckoutRequest orderServiceCheckoutRequest = default(OrderServiceCheckoutRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceCheckoutRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfListOfOrderServiceCheckoutItem</returns>
        ApiResponse<RestResultOfListOfOrderServiceCheckoutItem> ApiOrderCheckoutPostWithHttpInfo(OrderServiceCheckoutRequest orderServiceCheckoutRequest = default(OrderServiceCheckoutRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceOrderRequest"> (optional)</param>
        /// <returns>RestResultOfOrderServiceOrderResponse</returns>
        RestResultOfOrderServiceOrderResponse ApiOrderCreateOrderPost(OrderServiceOrderRequest orderServiceOrderRequest = default(OrderServiceOrderRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceOrderRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfOrderServiceOrderResponse</returns>
        ApiResponse<RestResultOfOrderServiceOrderResponse> ApiOrderCreateOrderPostWithHttpInfo(OrderServiceOrderRequest orderServiceOrderRequest = default(OrderServiceOrderRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RestResultOfOrderServiceGetOrderListResponse</returns>
        RestResultOfOrderServiceGetOrderListResponse ApiOrderGetOrderListPost();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RestResultOfOrderServiceGetOrderListResponse</returns>
        ApiResponse<RestResultOfOrderServiceGetOrderListResponse> ApiOrderGetOrderListPostWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceGetOrderRequest"> (optional)</param>
        /// <returns>RestResultOfOrderServiceOrderResponse</returns>
        RestResultOfOrderServiceOrderResponse ApiOrderGetOrderPost(OrderServiceGetOrderRequest orderServiceGetOrderRequest = default(OrderServiceGetOrderRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceGetOrderRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfOrderServiceOrderResponse</returns>
        ApiResponse<RestResultOfOrderServiceOrderResponse> ApiOrderGetOrderPostWithHttpInfo(OrderServiceGetOrderRequest orderServiceGetOrderRequest = default(OrderServiceGetOrderRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServicePatchOrderRequest"> (optional)</param>
        /// <returns>RestResultOfOrderServiceOrderResponse</returns>
        RestResultOfOrderServiceOrderResponse ApiOrderPatchOrderPost(OrderServicePatchOrderRequest orderServicePatchOrderRequest = default(OrderServicePatchOrderRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServicePatchOrderRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfOrderServiceOrderResponse</returns>
        ApiResponse<RestResultOfOrderServiceOrderResponse> ApiOrderPatchOrderPostWithHttpInfo(OrderServicePatchOrderRequest orderServicePatchOrderRequest = default(OrderServicePatchOrderRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceUpdateOrderRequest"> (optional)</param>
        /// <returns>RestResultOfOrderServiceOrderResponse</returns>
        RestResultOfOrderServiceOrderResponse ApiOrderUpdateStatusPost(OrderServiceUpdateOrderRequest orderServiceUpdateOrderRequest = default(OrderServiceUpdateOrderRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceUpdateOrderRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfOrderServiceOrderResponse</returns>
        ApiResponse<RestResultOfOrderServiceOrderResponse> ApiOrderUpdateStatusPostWithHttpInfo(OrderServiceUpdateOrderRequest orderServiceUpdateOrderRequest = default(OrderServiceUpdateOrderRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceCheckoutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfListOfOrderServiceCheckoutItem</returns>
        System.Threading.Tasks.Task<RestResultOfListOfOrderServiceCheckoutItem> ApiOrderCheckoutPostAsync(OrderServiceCheckoutRequest orderServiceCheckoutRequest = default(OrderServiceCheckoutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceCheckoutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfListOfOrderServiceCheckoutItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfListOfOrderServiceCheckoutItem>> ApiOrderCheckoutPostWithHttpInfoAsync(OrderServiceCheckoutRequest orderServiceCheckoutRequest = default(OrderServiceCheckoutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfOrderServiceOrderResponse</returns>
        System.Threading.Tasks.Task<RestResultOfOrderServiceOrderResponse> ApiOrderCreateOrderPostAsync(OrderServiceOrderRequest orderServiceOrderRequest = default(OrderServiceOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfOrderServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfOrderServiceOrderResponse>> ApiOrderCreateOrderPostWithHttpInfoAsync(OrderServiceOrderRequest orderServiceOrderRequest = default(OrderServiceOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfOrderServiceGetOrderListResponse</returns>
        System.Threading.Tasks.Task<RestResultOfOrderServiceGetOrderListResponse> ApiOrderGetOrderListPostAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfOrderServiceGetOrderListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfOrderServiceGetOrderListResponse>> ApiOrderGetOrderListPostWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceGetOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfOrderServiceOrderResponse</returns>
        System.Threading.Tasks.Task<RestResultOfOrderServiceOrderResponse> ApiOrderGetOrderPostAsync(OrderServiceGetOrderRequest orderServiceGetOrderRequest = default(OrderServiceGetOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceGetOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfOrderServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfOrderServiceOrderResponse>> ApiOrderGetOrderPostWithHttpInfoAsync(OrderServiceGetOrderRequest orderServiceGetOrderRequest = default(OrderServiceGetOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServicePatchOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfOrderServiceOrderResponse</returns>
        System.Threading.Tasks.Task<RestResultOfOrderServiceOrderResponse> ApiOrderPatchOrderPostAsync(OrderServicePatchOrderRequest orderServicePatchOrderRequest = default(OrderServicePatchOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServicePatchOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfOrderServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfOrderServiceOrderResponse>> ApiOrderPatchOrderPostWithHttpInfoAsync(OrderServicePatchOrderRequest orderServicePatchOrderRequest = default(OrderServicePatchOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceUpdateOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfOrderServiceOrderResponse</returns>
        System.Threading.Tasks.Task<RestResultOfOrderServiceOrderResponse> ApiOrderUpdateStatusPostAsync(OrderServiceUpdateOrderRequest orderServiceUpdateOrderRequest = default(OrderServiceUpdateOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceUpdateOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfOrderServiceOrderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfOrderServiceOrderResponse>> ApiOrderUpdateStatusPostWithHttpInfoAsync(OrderServiceUpdateOrderRequest orderServiceUpdateOrderRequest = default(OrderServiceUpdateOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApi : IOrderApiSync, IOrderApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrderApi : IOrderApi
    {
        private Kiler.Dotnet.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderApi(string basePath)
        {
            this.Configuration = Kiler.Dotnet.ApiClient.Client.Configuration.MergeConfigurations(
                Kiler.Dotnet.ApiClient.Client.GlobalConfiguration.Instance,
                new Kiler.Dotnet.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Kiler.Dotnet.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kiler.Dotnet.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Kiler.Dotnet.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrderApi(Kiler.Dotnet.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Kiler.Dotnet.ApiClient.Client.Configuration.MergeConfigurations(
                Kiler.Dotnet.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Kiler.Dotnet.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kiler.Dotnet.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Kiler.Dotnet.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrderApi(Kiler.Dotnet.ApiClient.Client.ISynchronousClient client, Kiler.Dotnet.ApiClient.Client.IAsynchronousClient asyncClient, Kiler.Dotnet.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Kiler.Dotnet.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Kiler.Dotnet.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Kiler.Dotnet.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Kiler.Dotnet.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Kiler.Dotnet.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceCheckoutRequest"> (optional)</param>
        /// <returns>RestResultOfListOfOrderServiceCheckoutItem</returns>
        public RestResultOfListOfOrderServiceCheckoutItem ApiOrderCheckoutPost(OrderServiceCheckoutRequest orderServiceCheckoutRequest = default(OrderServiceCheckoutRequest))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfListOfOrderServiceCheckoutItem> localVarResponse = ApiOrderCheckoutPostWithHttpInfo(orderServiceCheckoutRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceCheckoutRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfListOfOrderServiceCheckoutItem</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfListOfOrderServiceCheckoutItem> ApiOrderCheckoutPostWithHttpInfo(OrderServiceCheckoutRequest orderServiceCheckoutRequest = default(OrderServiceCheckoutRequest))
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderServiceCheckoutRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RestResultOfListOfOrderServiceCheckoutItem>("/api/Order/Checkout", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOrderCheckoutPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceCheckoutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfListOfOrderServiceCheckoutItem</returns>
        public async System.Threading.Tasks.Task<RestResultOfListOfOrderServiceCheckoutItem> ApiOrderCheckoutPostAsync(OrderServiceCheckoutRequest orderServiceCheckoutRequest = default(OrderServiceCheckoutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfListOfOrderServiceCheckoutItem> localVarResponse = await ApiOrderCheckoutPostWithHttpInfoAsync(orderServiceCheckoutRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceCheckoutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfListOfOrderServiceCheckoutItem)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfListOfOrderServiceCheckoutItem>> ApiOrderCheckoutPostWithHttpInfoAsync(OrderServiceCheckoutRequest orderServiceCheckoutRequest = default(OrderServiceCheckoutRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderServiceCheckoutRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestResultOfListOfOrderServiceCheckoutItem>("/api/Order/Checkout", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOrderCheckoutPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceOrderRequest"> (optional)</param>
        /// <returns>RestResultOfOrderServiceOrderResponse</returns>
        public RestResultOfOrderServiceOrderResponse ApiOrderCreateOrderPost(OrderServiceOrderRequest orderServiceOrderRequest = default(OrderServiceOrderRequest))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfOrderServiceOrderResponse> localVarResponse = ApiOrderCreateOrderPostWithHttpInfo(orderServiceOrderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceOrderRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfOrderServiceOrderResponse</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfOrderServiceOrderResponse> ApiOrderCreateOrderPostWithHttpInfo(OrderServiceOrderRequest orderServiceOrderRequest = default(OrderServiceOrderRequest))
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderServiceOrderRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RestResultOfOrderServiceOrderResponse>("/api/Order/CreateOrder", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOrderCreateOrderPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfOrderServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<RestResultOfOrderServiceOrderResponse> ApiOrderCreateOrderPostAsync(OrderServiceOrderRequest orderServiceOrderRequest = default(OrderServiceOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfOrderServiceOrderResponse> localVarResponse = await ApiOrderCreateOrderPostWithHttpInfoAsync(orderServiceOrderRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfOrderServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfOrderServiceOrderResponse>> ApiOrderCreateOrderPostWithHttpInfoAsync(OrderServiceOrderRequest orderServiceOrderRequest = default(OrderServiceOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderServiceOrderRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestResultOfOrderServiceOrderResponse>("/api/Order/CreateOrder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOrderCreateOrderPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RestResultOfOrderServiceGetOrderListResponse</returns>
        public RestResultOfOrderServiceGetOrderListResponse ApiOrderGetOrderListPost()
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfOrderServiceGetOrderListResponse> localVarResponse = ApiOrderGetOrderListPostWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RestResultOfOrderServiceGetOrderListResponse</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfOrderServiceGetOrderListResponse> ApiOrderGetOrderListPostWithHttpInfo()
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RestResultOfOrderServiceGetOrderListResponse>("/api/Order/GetOrderList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOrderGetOrderListPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfOrderServiceGetOrderListResponse</returns>
        public async System.Threading.Tasks.Task<RestResultOfOrderServiceGetOrderListResponse> ApiOrderGetOrderListPostAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfOrderServiceGetOrderListResponse> localVarResponse = await ApiOrderGetOrderListPostWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfOrderServiceGetOrderListResponse)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfOrderServiceGetOrderListResponse>> ApiOrderGetOrderListPostWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestResultOfOrderServiceGetOrderListResponse>("/api/Order/GetOrderList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOrderGetOrderListPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceGetOrderRequest"> (optional)</param>
        /// <returns>RestResultOfOrderServiceOrderResponse</returns>
        public RestResultOfOrderServiceOrderResponse ApiOrderGetOrderPost(OrderServiceGetOrderRequest orderServiceGetOrderRequest = default(OrderServiceGetOrderRequest))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfOrderServiceOrderResponse> localVarResponse = ApiOrderGetOrderPostWithHttpInfo(orderServiceGetOrderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceGetOrderRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfOrderServiceOrderResponse</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfOrderServiceOrderResponse> ApiOrderGetOrderPostWithHttpInfo(OrderServiceGetOrderRequest orderServiceGetOrderRequest = default(OrderServiceGetOrderRequest))
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderServiceGetOrderRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RestResultOfOrderServiceOrderResponse>("/api/Order/GetOrder", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOrderGetOrderPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceGetOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfOrderServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<RestResultOfOrderServiceOrderResponse> ApiOrderGetOrderPostAsync(OrderServiceGetOrderRequest orderServiceGetOrderRequest = default(OrderServiceGetOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfOrderServiceOrderResponse> localVarResponse = await ApiOrderGetOrderPostWithHttpInfoAsync(orderServiceGetOrderRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceGetOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfOrderServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfOrderServiceOrderResponse>> ApiOrderGetOrderPostWithHttpInfoAsync(OrderServiceGetOrderRequest orderServiceGetOrderRequest = default(OrderServiceGetOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderServiceGetOrderRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestResultOfOrderServiceOrderResponse>("/api/Order/GetOrder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOrderGetOrderPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServicePatchOrderRequest"> (optional)</param>
        /// <returns>RestResultOfOrderServiceOrderResponse</returns>
        public RestResultOfOrderServiceOrderResponse ApiOrderPatchOrderPost(OrderServicePatchOrderRequest orderServicePatchOrderRequest = default(OrderServicePatchOrderRequest))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfOrderServiceOrderResponse> localVarResponse = ApiOrderPatchOrderPostWithHttpInfo(orderServicePatchOrderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServicePatchOrderRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfOrderServiceOrderResponse</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfOrderServiceOrderResponse> ApiOrderPatchOrderPostWithHttpInfo(OrderServicePatchOrderRequest orderServicePatchOrderRequest = default(OrderServicePatchOrderRequest))
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderServicePatchOrderRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RestResultOfOrderServiceOrderResponse>("/api/Order/PatchOrder", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOrderPatchOrderPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServicePatchOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfOrderServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<RestResultOfOrderServiceOrderResponse> ApiOrderPatchOrderPostAsync(OrderServicePatchOrderRequest orderServicePatchOrderRequest = default(OrderServicePatchOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfOrderServiceOrderResponse> localVarResponse = await ApiOrderPatchOrderPostWithHttpInfoAsync(orderServicePatchOrderRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServicePatchOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfOrderServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfOrderServiceOrderResponse>> ApiOrderPatchOrderPostWithHttpInfoAsync(OrderServicePatchOrderRequest orderServicePatchOrderRequest = default(OrderServicePatchOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderServicePatchOrderRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestResultOfOrderServiceOrderResponse>("/api/Order/PatchOrder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOrderPatchOrderPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceUpdateOrderRequest"> (optional)</param>
        /// <returns>RestResultOfOrderServiceOrderResponse</returns>
        public RestResultOfOrderServiceOrderResponse ApiOrderUpdateStatusPost(OrderServiceUpdateOrderRequest orderServiceUpdateOrderRequest = default(OrderServiceUpdateOrderRequest))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfOrderServiceOrderResponse> localVarResponse = ApiOrderUpdateStatusPostWithHttpInfo(orderServiceUpdateOrderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceUpdateOrderRequest"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfOrderServiceOrderResponse</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfOrderServiceOrderResponse> ApiOrderUpdateStatusPostWithHttpInfo(OrderServiceUpdateOrderRequest orderServiceUpdateOrderRequest = default(OrderServiceUpdateOrderRequest))
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderServiceUpdateOrderRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RestResultOfOrderServiceOrderResponse>("/api/Order/UpdateStatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOrderUpdateStatusPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceUpdateOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfOrderServiceOrderResponse</returns>
        public async System.Threading.Tasks.Task<RestResultOfOrderServiceOrderResponse> ApiOrderUpdateStatusPostAsync(OrderServiceUpdateOrderRequest orderServiceUpdateOrderRequest = default(OrderServiceUpdateOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfOrderServiceOrderResponse> localVarResponse = await ApiOrderUpdateStatusPostWithHttpInfoAsync(orderServiceUpdateOrderRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderServiceUpdateOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfOrderServiceOrderResponse)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfOrderServiceOrderResponse>> ApiOrderUpdateStatusPostWithHttpInfoAsync(OrderServiceUpdateOrderRequest orderServiceUpdateOrderRequest = default(OrderServiceUpdateOrderRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderServiceUpdateOrderRequest;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestResultOfOrderServiceOrderResponse>("/api/Order/UpdateStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOrderUpdateStatusPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
