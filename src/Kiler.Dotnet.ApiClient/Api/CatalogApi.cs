/*
 * Kiler API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Kiler.Dotnet.ApiClient.Client;
using Kiler.Dotnet.ApiClient.Model;

namespace Kiler.Dotnet.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICatalogApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RestResultOfCatalogServiceRCategory</returns>
        RestResultOfCatalogServiceRCategory ApiCatalogAllCategoriesGet();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RestResultOfCatalogServiceRCategory</returns>
        ApiResponse<RestResultOfCatalogServiceRCategory> ApiCatalogAllCategoriesGetWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <returns>RestResultOfCatalogServiceRCategory</returns>
        RestResultOfCatalogServiceRCategory ApiCatalogAllCategoriesRegionGet(int? neighborhood = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfCatalogServiceRCategory</returns>
        ApiResponse<RestResultOfCatalogServiceRCategory> ApiCatalogAllCategoriesRegionGetWithHttpInfo(int? neighborhood = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <returns>List&lt;int&gt;</returns>
        List<int> ApiCatalogAllCategoriesRegionProductsIDGet(int? neighborhood = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        ApiResponse<List<int>> ApiCatalogAllCategoriesRegionProductsIDGetWithHttpInfo(int? neighborhood = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parent"> (optional)</param>
        /// <param name="level"> (optional)</param>
        /// <param name="showInMenu"> (optional)</param>
        /// <returns>RestResultOfCatalogServiceRCategory</returns>
        RestResultOfCatalogServiceRCategory ApiCatalogCreateCategoryPost(string name = default(string), int? parent = default(int?), int? level = default(int?), bool? showInMenu = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parent"> (optional)</param>
        /// <param name="level"> (optional)</param>
        /// <param name="showInMenu"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfCatalogServiceRCategory</returns>
        ApiResponse<RestResultOfCatalogServiceRCategory> ApiCatalogCreateCategoryPostWithHttpInfo(string name = default(string), int? parent = default(int?), int? level = default(int?), bool? showInMenu = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>RestResultOfCatalogServiceRCategory</returns>
        RestResultOfCatalogServiceRCategory ApiCatalogDeleteCategoryDelete(int? id = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfCatalogServiceRCategory</returns>
        ApiResponse<RestResultOfCatalogServiceRCategory> ApiCatalogDeleteCategoryDeleteWithHttpInfo(int? id = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <returns>RestResultOfCatalogServiceRCategory</returns>
        RestResultOfCatalogServiceRCategory ApiCatalogGetNeighborhoodCatalogGet(int? neighborhood = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfCatalogServiceRCategory</returns>
        ApiResponse<RestResultOfCatalogServiceRCategory> ApiCatalogGetNeighborhoodCatalogGetWithHttpInfo(int? neighborhood = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region"> (optional)</param>
        /// <returns>RestResultOfCatalogServiceRCategory</returns>
        RestResultOfCatalogServiceRCategory ApiCatalogGetRegionCatalogGet(int? region = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfCatalogServiceRCategory</returns>
        ApiResponse<RestResultOfCatalogServiceRCategory> ApiCatalogGetRegionCatalogGetWithHttpInfo(int? region = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ApiCatalogImportCategoriesFromOlimposPost();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiCatalogImportCategoriesFromOlimposPostWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="regionId"> (optional)</param>
        /// <param name="withProducts"> (optional)</param>
        /// <param name="nestingLevel"> (optional)</param>
        /// <returns>RestResultOfCatalogServiceRCategory</returns>
        RestResultOfCatalogServiceRCategory ApiCatalogPost(int? categoryId = default(int?), int? regionId = default(int?), bool? withProducts = default(bool?), int? nestingLevel = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="regionId"> (optional)</param>
        /// <param name="withProducts"> (optional)</param>
        /// <param name="nestingLevel"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfCatalogServiceRCategory</returns>
        ApiResponse<RestResultOfCatalogServiceRCategory> ApiCatalogPostWithHttpInfo(int? categoryId = default(int?), int? regionId = default(int?), bool? withProducts = default(bool?), int? nestingLevel = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="parent"> (optional)</param>
        /// <param name="level"> (optional)</param>
        /// <returns>RestResultOfCatalogServiceRCategory</returns>
        RestResultOfCatalogServiceRCategory ApiCatalogUpdateCategoryPut(int? id = default(int?), string name = default(string), int? parent = default(int?), int? level = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="parent"> (optional)</param>
        /// <param name="level"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfCatalogServiceRCategory</returns>
        ApiResponse<RestResultOfCatalogServiceRCategory> ApiCatalogUpdateCategoryPutWithHttpInfo(int? id = default(int?), string name = default(string), int? parent = default(int?), int? level = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICatalogApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfCatalogServiceRCategory</returns>
        System.Threading.Tasks.Task<RestResultOfCatalogServiceRCategory> ApiCatalogAllCategoriesGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfCatalogServiceRCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfCatalogServiceRCategory>> ApiCatalogAllCategoriesGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfCatalogServiceRCategory</returns>
        System.Threading.Tasks.Task<RestResultOfCatalogServiceRCategory> ApiCatalogAllCategoriesRegionGetAsync(int? neighborhood = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfCatalogServiceRCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfCatalogServiceRCategory>> ApiCatalogAllCategoriesRegionGetWithHttpInfoAsync(int? neighborhood = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;int&gt;</returns>
        System.Threading.Tasks.Task<List<int>> ApiCatalogAllCategoriesRegionProductsIDGetAsync(int? neighborhood = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int>>> ApiCatalogAllCategoriesRegionProductsIDGetWithHttpInfoAsync(int? neighborhood = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parent"> (optional)</param>
        /// <param name="level"> (optional)</param>
        /// <param name="showInMenu"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfCatalogServiceRCategory</returns>
        System.Threading.Tasks.Task<RestResultOfCatalogServiceRCategory> ApiCatalogCreateCategoryPostAsync(string name = default(string), int? parent = default(int?), int? level = default(int?), bool? showInMenu = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parent"> (optional)</param>
        /// <param name="level"> (optional)</param>
        /// <param name="showInMenu"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfCatalogServiceRCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfCatalogServiceRCategory>> ApiCatalogCreateCategoryPostWithHttpInfoAsync(string name = default(string), int? parent = default(int?), int? level = default(int?), bool? showInMenu = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfCatalogServiceRCategory</returns>
        System.Threading.Tasks.Task<RestResultOfCatalogServiceRCategory> ApiCatalogDeleteCategoryDeleteAsync(int? id = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfCatalogServiceRCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfCatalogServiceRCategory>> ApiCatalogDeleteCategoryDeleteWithHttpInfoAsync(int? id = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfCatalogServiceRCategory</returns>
        System.Threading.Tasks.Task<RestResultOfCatalogServiceRCategory> ApiCatalogGetNeighborhoodCatalogGetAsync(int? neighborhood = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfCatalogServiceRCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfCatalogServiceRCategory>> ApiCatalogGetNeighborhoodCatalogGetWithHttpInfoAsync(int? neighborhood = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfCatalogServiceRCategory</returns>
        System.Threading.Tasks.Task<RestResultOfCatalogServiceRCategory> ApiCatalogGetRegionCatalogGetAsync(int? region = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfCatalogServiceRCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfCatalogServiceRCategory>> ApiCatalogGetRegionCatalogGetWithHttpInfoAsync(int? region = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiCatalogImportCategoriesFromOlimposPostAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiCatalogImportCategoriesFromOlimposPostWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="regionId"> (optional)</param>
        /// <param name="withProducts"> (optional)</param>
        /// <param name="nestingLevel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfCatalogServiceRCategory</returns>
        System.Threading.Tasks.Task<RestResultOfCatalogServiceRCategory> ApiCatalogPostAsync(int? categoryId = default(int?), int? regionId = default(int?), bool? withProducts = default(bool?), int? nestingLevel = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="regionId"> (optional)</param>
        /// <param name="withProducts"> (optional)</param>
        /// <param name="nestingLevel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfCatalogServiceRCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfCatalogServiceRCategory>> ApiCatalogPostWithHttpInfoAsync(int? categoryId = default(int?), int? regionId = default(int?), bool? withProducts = default(bool?), int? nestingLevel = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="parent"> (optional)</param>
        /// <param name="level"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfCatalogServiceRCategory</returns>
        System.Threading.Tasks.Task<RestResultOfCatalogServiceRCategory> ApiCatalogUpdateCategoryPutAsync(int? id = default(int?), string name = default(string), int? parent = default(int?), int? level = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="parent"> (optional)</param>
        /// <param name="level"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfCatalogServiceRCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestResultOfCatalogServiceRCategory>> ApiCatalogUpdateCategoryPutWithHttpInfoAsync(int? id = default(int?), string name = default(string), int? parent = default(int?), int? level = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICatalogApi : ICatalogApiSync, ICatalogApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CatalogApi : ICatalogApi
    {
        private Kiler.Dotnet.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CatalogApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CatalogApi(string basePath)
        {
            this.Configuration = Kiler.Dotnet.ApiClient.Client.Configuration.MergeConfigurations(
                Kiler.Dotnet.ApiClient.Client.GlobalConfiguration.Instance,
                new Kiler.Dotnet.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Kiler.Dotnet.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kiler.Dotnet.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Kiler.Dotnet.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CatalogApi(Kiler.Dotnet.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Kiler.Dotnet.ApiClient.Client.Configuration.MergeConfigurations(
                Kiler.Dotnet.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Kiler.Dotnet.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Kiler.Dotnet.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Kiler.Dotnet.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CatalogApi(Kiler.Dotnet.ApiClient.Client.ISynchronousClient client, Kiler.Dotnet.ApiClient.Client.IAsynchronousClient asyncClient, Kiler.Dotnet.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Kiler.Dotnet.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Kiler.Dotnet.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Kiler.Dotnet.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Kiler.Dotnet.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Kiler.Dotnet.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RestResultOfCatalogServiceRCategory</returns>
        public RestResultOfCatalogServiceRCategory ApiCatalogAllCategoriesGet()
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> localVarResponse = ApiCatalogAllCategoriesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RestResultOfCatalogServiceRCategory</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> ApiCatalogAllCategoriesGetWithHttpInfo()
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RestResultOfCatalogServiceRCategory>("/api/Catalog/allCategories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCatalogAllCategoriesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfCatalogServiceRCategory</returns>
        public async System.Threading.Tasks.Task<RestResultOfCatalogServiceRCategory> ApiCatalogAllCategoriesGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> localVarResponse = await ApiCatalogAllCategoriesGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfCatalogServiceRCategory)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory>> ApiCatalogAllCategoriesGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RestResultOfCatalogServiceRCategory>("/api/Catalog/allCategories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCatalogAllCategoriesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <returns>RestResultOfCatalogServiceRCategory</returns>
        public RestResultOfCatalogServiceRCategory ApiCatalogAllCategoriesRegionGet(int? neighborhood = default(int?))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> localVarResponse = ApiCatalogAllCategoriesRegionGetWithHttpInfo(neighborhood);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfCatalogServiceRCategory</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> ApiCatalogAllCategoriesRegionGetWithHttpInfo(int? neighborhood = default(int?))
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (neighborhood != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Neighborhood", neighborhood));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RestResultOfCatalogServiceRCategory>("/api/Catalog/allCategoriesRegion", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCatalogAllCategoriesRegionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfCatalogServiceRCategory</returns>
        public async System.Threading.Tasks.Task<RestResultOfCatalogServiceRCategory> ApiCatalogAllCategoriesRegionGetAsync(int? neighborhood = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> localVarResponse = await ApiCatalogAllCategoriesRegionGetWithHttpInfoAsync(neighborhood, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfCatalogServiceRCategory)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory>> ApiCatalogAllCategoriesRegionGetWithHttpInfoAsync(int? neighborhood = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (neighborhood != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Neighborhood", neighborhood));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RestResultOfCatalogServiceRCategory>("/api/Catalog/allCategoriesRegion", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCatalogAllCategoriesRegionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <returns>List&lt;int&gt;</returns>
        public List<int> ApiCatalogAllCategoriesRegionProductsIDGet(int? neighborhood = default(int?))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<List<int>> localVarResponse = ApiCatalogAllCategoriesRegionProductsIDGetWithHttpInfo(neighborhood);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<List<int>> ApiCatalogAllCategoriesRegionProductsIDGetWithHttpInfo(int? neighborhood = default(int?))
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (neighborhood != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "neighborhood", neighborhood));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<int>>("/api/Catalog/allCategoriesRegionProductsID", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCatalogAllCategoriesRegionProductsIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;int&gt;</returns>
        public async System.Threading.Tasks.Task<List<int>> ApiCatalogAllCategoriesRegionProductsIDGetAsync(int? neighborhood = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<List<int>> localVarResponse = await ApiCatalogAllCategoriesRegionProductsIDGetWithHttpInfoAsync(neighborhood, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<List<int>>> ApiCatalogAllCategoriesRegionProductsIDGetWithHttpInfoAsync(int? neighborhood = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (neighborhood != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "neighborhood", neighborhood));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<int>>("/api/Catalog/allCategoriesRegionProductsID", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCatalogAllCategoriesRegionProductsIDGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parent"> (optional)</param>
        /// <param name="level"> (optional)</param>
        /// <param name="showInMenu"> (optional)</param>
        /// <returns>RestResultOfCatalogServiceRCategory</returns>
        public RestResultOfCatalogServiceRCategory ApiCatalogCreateCategoryPost(string name = default(string), int? parent = default(int?), int? level = default(int?), bool? showInMenu = default(bool?))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> localVarResponse = ApiCatalogCreateCategoryPostWithHttpInfo(name, parent, level, showInMenu);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parent"> (optional)</param>
        /// <param name="level"> (optional)</param>
        /// <param name="showInMenu"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfCatalogServiceRCategory</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> ApiCatalogCreateCategoryPostWithHttpInfo(string name = default(string), int? parent = default(int?), int? level = default(int?), bool? showInMenu = default(bool?))
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Name", name));
            }
            if (parent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Parent", parent));
            }
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Level", level));
            }
            if (showInMenu != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "ShowInMenu", showInMenu));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RestResultOfCatalogServiceRCategory>("/api/Catalog/createCategory", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCatalogCreateCategoryPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parent"> (optional)</param>
        /// <param name="level"> (optional)</param>
        /// <param name="showInMenu"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfCatalogServiceRCategory</returns>
        public async System.Threading.Tasks.Task<RestResultOfCatalogServiceRCategory> ApiCatalogCreateCategoryPostAsync(string name = default(string), int? parent = default(int?), int? level = default(int?), bool? showInMenu = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> localVarResponse = await ApiCatalogCreateCategoryPostWithHttpInfoAsync(name, parent, level, showInMenu, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parent"> (optional)</param>
        /// <param name="level"> (optional)</param>
        /// <param name="showInMenu"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfCatalogServiceRCategory)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory>> ApiCatalogCreateCategoryPostWithHttpInfoAsync(string name = default(string), int? parent = default(int?), int? level = default(int?), bool? showInMenu = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Name", name));
            }
            if (parent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Parent", parent));
            }
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Level", level));
            }
            if (showInMenu != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "ShowInMenu", showInMenu));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestResultOfCatalogServiceRCategory>("/api/Catalog/createCategory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCatalogCreateCategoryPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>RestResultOfCatalogServiceRCategory</returns>
        public RestResultOfCatalogServiceRCategory ApiCatalogDeleteCategoryDelete(int? id = default(int?))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> localVarResponse = ApiCatalogDeleteCategoryDeleteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfCatalogServiceRCategory</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> ApiCatalogDeleteCategoryDeleteWithHttpInfo(int? id = default(int?))
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Id", id));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<RestResultOfCatalogServiceRCategory>("/api/Catalog/deleteCategory", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCatalogDeleteCategoryDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfCatalogServiceRCategory</returns>
        public async System.Threading.Tasks.Task<RestResultOfCatalogServiceRCategory> ApiCatalogDeleteCategoryDeleteAsync(int? id = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> localVarResponse = await ApiCatalogDeleteCategoryDeleteWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfCatalogServiceRCategory)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory>> ApiCatalogDeleteCategoryDeleteWithHttpInfoAsync(int? id = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Id", id));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RestResultOfCatalogServiceRCategory>("/api/Catalog/deleteCategory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCatalogDeleteCategoryDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <returns>RestResultOfCatalogServiceRCategory</returns>
        public RestResultOfCatalogServiceRCategory ApiCatalogGetNeighborhoodCatalogGet(int? neighborhood = default(int?))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> localVarResponse = ApiCatalogGetNeighborhoodCatalogGetWithHttpInfo(neighborhood);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfCatalogServiceRCategory</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> ApiCatalogGetNeighborhoodCatalogGetWithHttpInfo(int? neighborhood = default(int?))
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (neighborhood != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "neighborhood", neighborhood));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RestResultOfCatalogServiceRCategory>("/api/Catalog/getNeighborhoodCatalog", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCatalogGetNeighborhoodCatalogGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfCatalogServiceRCategory</returns>
        public async System.Threading.Tasks.Task<RestResultOfCatalogServiceRCategory> ApiCatalogGetNeighborhoodCatalogGetAsync(int? neighborhood = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> localVarResponse = await ApiCatalogGetNeighborhoodCatalogGetWithHttpInfoAsync(neighborhood, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="neighborhood"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfCatalogServiceRCategory)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory>> ApiCatalogGetNeighborhoodCatalogGetWithHttpInfoAsync(int? neighborhood = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (neighborhood != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "neighborhood", neighborhood));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RestResultOfCatalogServiceRCategory>("/api/Catalog/getNeighborhoodCatalog", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCatalogGetNeighborhoodCatalogGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region"> (optional)</param>
        /// <returns>RestResultOfCatalogServiceRCategory</returns>
        public RestResultOfCatalogServiceRCategory ApiCatalogGetRegionCatalogGet(int? region = default(int?))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> localVarResponse = ApiCatalogGetRegionCatalogGetWithHttpInfo(region);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfCatalogServiceRCategory</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> ApiCatalogGetRegionCatalogGetWithHttpInfo(int? region = default(int?))
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RestResultOfCatalogServiceRCategory>("/api/Catalog/getRegionCatalog", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCatalogGetRegionCatalogGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfCatalogServiceRCategory</returns>
        public async System.Threading.Tasks.Task<RestResultOfCatalogServiceRCategory> ApiCatalogGetRegionCatalogGetAsync(int? region = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> localVarResponse = await ApiCatalogGetRegionCatalogGetWithHttpInfoAsync(region, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfCatalogServiceRCategory)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory>> ApiCatalogGetRegionCatalogGetWithHttpInfoAsync(int? region = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RestResultOfCatalogServiceRCategory>("/api/Catalog/getRegionCatalog", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCatalogGetRegionCatalogGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ApiCatalogImportCategoriesFromOlimposPost()
        {
            ApiCatalogImportCategoriesFromOlimposPostWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<Object> ApiCatalogImportCategoriesFromOlimposPostWithHttpInfo()
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Catalog/ImportCategoriesFromOlimpos", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCatalogImportCategoriesFromOlimposPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiCatalogImportCategoriesFromOlimposPostAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiCatalogImportCategoriesFromOlimposPostWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<Object>> ApiCatalogImportCategoriesFromOlimposPostWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Catalog/ImportCategoriesFromOlimpos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCatalogImportCategoriesFromOlimposPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="regionId"> (optional)</param>
        /// <param name="withProducts"> (optional)</param>
        /// <param name="nestingLevel"> (optional)</param>
        /// <returns>RestResultOfCatalogServiceRCategory</returns>
        public RestResultOfCatalogServiceRCategory ApiCatalogPost(int? categoryId = default(int?), int? regionId = default(int?), bool? withProducts = default(bool?), int? nestingLevel = default(int?))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> localVarResponse = ApiCatalogPostWithHttpInfo(categoryId, regionId, withProducts, nestingLevel);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="regionId"> (optional)</param>
        /// <param name="withProducts"> (optional)</param>
        /// <param name="nestingLevel"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfCatalogServiceRCategory</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> ApiCatalogPostWithHttpInfo(int? categoryId = default(int?), int? regionId = default(int?), bool? withProducts = default(bool?), int? nestingLevel = default(int?))
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (categoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "CategoryId", categoryId));
            }
            if (regionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "RegionId", regionId));
            }
            if (withProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "WithProducts", withProducts));
            }
            if (nestingLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "NestingLevel", nestingLevel));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RestResultOfCatalogServiceRCategory>("/api/Catalog", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCatalogPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="regionId"> (optional)</param>
        /// <param name="withProducts"> (optional)</param>
        /// <param name="nestingLevel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfCatalogServiceRCategory</returns>
        public async System.Threading.Tasks.Task<RestResultOfCatalogServiceRCategory> ApiCatalogPostAsync(int? categoryId = default(int?), int? regionId = default(int?), bool? withProducts = default(bool?), int? nestingLevel = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> localVarResponse = await ApiCatalogPostWithHttpInfoAsync(categoryId, regionId, withProducts, nestingLevel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="regionId"> (optional)</param>
        /// <param name="withProducts"> (optional)</param>
        /// <param name="nestingLevel"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfCatalogServiceRCategory)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory>> ApiCatalogPostWithHttpInfoAsync(int? categoryId = default(int?), int? regionId = default(int?), bool? withProducts = default(bool?), int? nestingLevel = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (categoryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "CategoryId", categoryId));
            }
            if (regionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "RegionId", regionId));
            }
            if (withProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "WithProducts", withProducts));
            }
            if (nestingLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "NestingLevel", nestingLevel));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestResultOfCatalogServiceRCategory>("/api/Catalog", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCatalogPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="parent"> (optional)</param>
        /// <param name="level"> (optional)</param>
        /// <returns>RestResultOfCatalogServiceRCategory</returns>
        public RestResultOfCatalogServiceRCategory ApiCatalogUpdateCategoryPut(int? id = default(int?), string name = default(string), int? parent = default(int?), int? level = default(int?))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> localVarResponse = ApiCatalogUpdateCategoryPutWithHttpInfo(id, name, parent, level);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="parent"> (optional)</param>
        /// <param name="level"> (optional)</param>
        /// <returns>ApiResponse of RestResultOfCatalogServiceRCategory</returns>
        public Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> ApiCatalogUpdateCategoryPutWithHttpInfo(int? id = default(int?), string name = default(string), int? parent = default(int?), int? level = default(int?))
        {
            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Name", name));
            }
            if (parent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Parent", parent));
            }
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Level", level));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<RestResultOfCatalogServiceRCategory>("/api/Catalog/updateCategory", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCatalogUpdateCategoryPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="parent"> (optional)</param>
        /// <param name="level"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestResultOfCatalogServiceRCategory</returns>
        public async System.Threading.Tasks.Task<RestResultOfCatalogServiceRCategory> ApiCatalogUpdateCategoryPutAsync(int? id = default(int?), string name = default(string), int? parent = default(int?), int? level = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory> localVarResponse = await ApiCatalogUpdateCategoryPutWithHttpInfoAsync(id, name, parent, level, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Kiler.Dotnet.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="parent"> (optional)</param>
        /// <param name="level"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestResultOfCatalogServiceRCategory)</returns>
        public async System.Threading.Tasks.Task<Kiler.Dotnet.ApiClient.Client.ApiResponse<RestResultOfCatalogServiceRCategory>> ApiCatalogUpdateCategoryPutWithHttpInfoAsync(int? id = default(int?), string name = default(string), int? parent = default(int?), int? level = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Kiler.Dotnet.ApiClient.Client.RequestOptions localVarRequestOptions = new Kiler.Dotnet.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Kiler.Dotnet.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Name", name));
            }
            if (parent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Parent", parent));
            }
            if (level != null)
            {
                localVarRequestOptions.QueryParameters.Add(Kiler.Dotnet.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "Level", level));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<RestResultOfCatalogServiceRCategory>("/api/Catalog/updateCategory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCatalogUpdateCategoryPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
