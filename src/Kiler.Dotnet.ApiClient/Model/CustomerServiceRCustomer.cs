/*
 * Kiler API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kiler.Dotnet.ApiClient.Client.OpenAPIDateConverter;

namespace Kiler.Dotnet.ApiClient.Model
{
    /// <summary>
    /// CustomerServiceRCustomer
    /// </summary>
    [DataContract(Name = "CustomerServiceRCustomer")]
    public partial class CustomerServiceRCustomer : IEquatable<CustomerServiceRCustomer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerServiceRCustomer" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="customerName">customerName.</param>
        /// <param name="customerSurname">customerSurname.</param>
        /// <param name="birthDate">birthDate.</param>
        /// <param name="phone">phone.</param>
        /// <param name="email">email.</param>
        /// <param name="gender">gender.</param>
        /// <param name="allowSms">allowSms.</param>
        /// <param name="allowEmail">allowEmail.</param>
        /// <param name="address">address.</param>
        /// <param name="registered">registered.</param>
        /// <param name="lastOrder">lastOrder.</param>
        /// <param name="identificationNumber">identificationNumber.</param>
        /// <param name="defaultAddress">defaultAddress.</param>
        /// <param name="invoiceAddress">invoiceAddress.</param>
        public CustomerServiceRCustomer(int id = default(int), string customerName = default(string), string customerSurname = default(string), DateTime? birthDate = default(DateTime?), string phone = default(string), string email = default(string), int? gender = default(int?), bool? allowSms = default(bool?), bool? allowEmail = default(bool?), List<CustomerServiceRAddress> address = default(List<CustomerServiceRAddress>), bool registered = default(bool), int lastOrder = default(int), string identificationNumber = default(string), int? defaultAddress = default(int?), int? invoiceAddress = default(int?))
        {
            this.Id = id;
            this.CustomerName = customerName;
            this.CustomerSurname = customerSurname;
            this.BirthDate = birthDate;
            this.Phone = phone;
            this.Email = email;
            this.Gender = gender;
            this.AllowSms = allowSms;
            this.AllowEmail = allowEmail;
            this.Address = address;
            this.Registered = registered;
            this.LastOrder = lastOrder;
            this.IdentificationNumber = identificationNumber;
            this.DefaultAddress = defaultAddress;
            this.InvoiceAddress = invoiceAddress;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets CustomerName
        /// </summary>
        [DataMember(Name = "customerName", EmitDefaultValue = true)]
        public string CustomerName { get; set; }

        /// <summary>
        /// Gets or Sets CustomerSurname
        /// </summary>
        [DataMember(Name = "customerSurname", EmitDefaultValue = true)]
        public string CustomerSurname { get; set; }

        /// <summary>
        /// Gets or Sets BirthDate
        /// </summary>
        [DataMember(Name = "birthDate", EmitDefaultValue = true)]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name = "phone", EmitDefaultValue = true)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name = "gender", EmitDefaultValue = true)]
        public int? Gender { get; set; }

        /// <summary>
        /// Gets or Sets AllowSms
        /// </summary>
        [DataMember(Name = "allowSms", EmitDefaultValue = true)]
        public bool? AllowSms { get; set; }

        /// <summary>
        /// Gets or Sets AllowEmail
        /// </summary>
        [DataMember(Name = "allowEmail", EmitDefaultValue = true)]
        public bool? AllowEmail { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = true)]
        public List<CustomerServiceRAddress> Address { get; set; }

        /// <summary>
        /// Gets or Sets Registered
        /// </summary>
        [DataMember(Name = "registered", EmitDefaultValue = true)]
        public bool Registered { get; set; }

        /// <summary>
        /// Gets or Sets LastOrder
        /// </summary>
        [DataMember(Name = "lastOrder", EmitDefaultValue = false)]
        public int LastOrder { get; set; }

        /// <summary>
        /// Gets or Sets IdentificationNumber
        /// </summary>
        [DataMember(Name = "identificationNumber", EmitDefaultValue = true)]
        public string IdentificationNumber { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAddress
        /// </summary>
        [DataMember(Name = "defaultAddress", EmitDefaultValue = true)]
        public int? DefaultAddress { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceAddress
        /// </summary>
        [DataMember(Name = "invoiceAddress", EmitDefaultValue = true)]
        public int? InvoiceAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerServiceRCustomer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  CustomerSurname: ").Append(CustomerSurname).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  AllowSms: ").Append(AllowSms).Append("\n");
            sb.Append("  AllowEmail: ").Append(AllowEmail).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Registered: ").Append(Registered).Append("\n");
            sb.Append("  LastOrder: ").Append(LastOrder).Append("\n");
            sb.Append("  IdentificationNumber: ").Append(IdentificationNumber).Append("\n");
            sb.Append("  DefaultAddress: ").Append(DefaultAddress).Append("\n");
            sb.Append("  InvoiceAddress: ").Append(InvoiceAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerServiceRCustomer);
        }

        /// <summary>
        /// Returns true if CustomerServiceRCustomer instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerServiceRCustomer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerServiceRCustomer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.CustomerName == input.CustomerName ||
                    (this.CustomerName != null &&
                    this.CustomerName.Equals(input.CustomerName))
                ) && 
                (
                    this.CustomerSurname == input.CustomerSurname ||
                    (this.CustomerSurname != null &&
                    this.CustomerSurname.Equals(input.CustomerSurname))
                ) && 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.AllowSms == input.AllowSms ||
                    (this.AllowSms != null &&
                    this.AllowSms.Equals(input.AllowSms))
                ) && 
                (
                    this.AllowEmail == input.AllowEmail ||
                    (this.AllowEmail != null &&
                    this.AllowEmail.Equals(input.AllowEmail))
                ) && 
                (
                    this.Address == input.Address ||
                    this.Address != null &&
                    input.Address != null &&
                    this.Address.SequenceEqual(input.Address)
                ) && 
                (
                    this.Registered == input.Registered ||
                    this.Registered.Equals(input.Registered)
                ) && 
                (
                    this.LastOrder == input.LastOrder ||
                    this.LastOrder.Equals(input.LastOrder)
                ) && 
                (
                    this.IdentificationNumber == input.IdentificationNumber ||
                    (this.IdentificationNumber != null &&
                    this.IdentificationNumber.Equals(input.IdentificationNumber))
                ) && 
                (
                    this.DefaultAddress == input.DefaultAddress ||
                    (this.DefaultAddress != null &&
                    this.DefaultAddress.Equals(input.DefaultAddress))
                ) && 
                (
                    this.InvoiceAddress == input.InvoiceAddress ||
                    (this.InvoiceAddress != null &&
                    this.InvoiceAddress.Equals(input.InvoiceAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.CustomerName != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerName.GetHashCode();
                }
                if (this.CustomerSurname != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerSurname.GetHashCode();
                }
                if (this.BirthDate != null)
                {
                    hashCode = (hashCode * 59) + this.BirthDate.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Gender != null)
                {
                    hashCode = (hashCode * 59) + this.Gender.GetHashCode();
                }
                if (this.AllowSms != null)
                {
                    hashCode = (hashCode * 59) + this.AllowSms.GetHashCode();
                }
                if (this.AllowEmail != null)
                {
                    hashCode = (hashCode * 59) + this.AllowEmail.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Registered.GetHashCode();
                hashCode = (hashCode * 59) + this.LastOrder.GetHashCode();
                if (this.IdentificationNumber != null)
                {
                    hashCode = (hashCode * 59) + this.IdentificationNumber.GetHashCode();
                }
                if (this.DefaultAddress != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultAddress.GetHashCode();
                }
                if (this.InvoiceAddress != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceAddress.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
