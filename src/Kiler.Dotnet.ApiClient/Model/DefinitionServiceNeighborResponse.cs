/*
 * Kiler API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kiler.Dotnet.ApiClient.Client.OpenAPIDateConverter;

namespace Kiler.Dotnet.ApiClient.Model
{
    /// <summary>
    /// DefinitionServiceNeighborResponse
    /// </summary>
    [DataContract(Name = "DefinitionServiceNeighborResponse")]
    public partial class DefinitionServiceNeighborResponse : IEquatable<DefinitionServiceNeighborResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DefinitionServiceNeighborResponse" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="cityName">cityName.</param>
        /// <param name="countyName">countyName.</param>
        /// <param name="region">region.</param>
        /// <param name="regionName">regionName.</param>
        /// <param name="gpsId">gpsId.</param>
        /// <param name="branch">branch.</param>
        public DefinitionServiceNeighborResponse(int id = default(int), string name = default(string), string cityName = default(string), string countyName = default(string), int region = default(int), string regionName = default(string), int gpsId = default(int), List<DefinitionServiceBranchResponse> branch = default(List<DefinitionServiceBranchResponse>))
        {
            this.Id = id;
            this.Name = name;
            this.CityName = cityName;
            this.CountyName = countyName;
            this.Region = region;
            this.RegionName = regionName;
            this.GpsId = gpsId;
            this.Branch = branch;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CityName
        /// </summary>
        [DataMember(Name = "cityName", EmitDefaultValue = false)]
        public string CityName { get; set; }

        /// <summary>
        /// Gets or Sets CountyName
        /// </summary>
        [DataMember(Name = "countyName", EmitDefaultValue = false)]
        public string CountyName { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public int Region { get; set; }

        /// <summary>
        /// Gets or Sets RegionName
        /// </summary>
        [DataMember(Name = "regionName", EmitDefaultValue = false)]
        public string RegionName { get; set; }

        /// <summary>
        /// Gets or Sets GpsId
        /// </summary>
        [DataMember(Name = "gpsId", EmitDefaultValue = false)]
        public int GpsId { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name = "branch", EmitDefaultValue = false)]
        public List<DefinitionServiceBranchResponse> Branch { get; set; }

        /// <summary>
        /// Gets or Sets Population
        /// </summary>
        [DataMember(Name = "population", EmitDefaultValue = false)]
        public int Population { get; private set; }

        /// <summary>
        /// Returns false as Population should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePopulation()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DefinitionServiceNeighborResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CityName: ").Append(CityName).Append("\n");
            sb.Append("  CountyName: ").Append(CountyName).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  RegionName: ").Append(RegionName).Append("\n");
            sb.Append("  GpsId: ").Append(GpsId).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  Population: ").Append(Population).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DefinitionServiceNeighborResponse);
        }

        /// <summary>
        /// Returns true if DefinitionServiceNeighborResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DefinitionServiceNeighborResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DefinitionServiceNeighborResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CityName == input.CityName ||
                    (this.CityName != null &&
                    this.CityName.Equals(input.CityName))
                ) && 
                (
                    this.CountyName == input.CountyName ||
                    (this.CountyName != null &&
                    this.CountyName.Equals(input.CountyName))
                ) && 
                (
                    this.Region == input.Region ||
                    this.Region.Equals(input.Region)
                ) && 
                (
                    this.RegionName == input.RegionName ||
                    (this.RegionName != null &&
                    this.RegionName.Equals(input.RegionName))
                ) && 
                (
                    this.GpsId == input.GpsId ||
                    this.GpsId.Equals(input.GpsId)
                ) && 
                (
                    this.Branch == input.Branch ||
                    this.Branch != null &&
                    input.Branch != null &&
                    this.Branch.SequenceEqual(input.Branch)
                ) && 
                (
                    this.Population == input.Population ||
                    this.Population.Equals(input.Population)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.CityName != null)
                {
                    hashCode = (hashCode * 59) + this.CityName.GetHashCode();
                }
                if (this.CountyName != null)
                {
                    hashCode = (hashCode * 59) + this.CountyName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Region.GetHashCode();
                if (this.RegionName != null)
                {
                    hashCode = (hashCode * 59) + this.RegionName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GpsId.GetHashCode();
                if (this.Branch != null)
                {
                    hashCode = (hashCode * 59) + this.Branch.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Population.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
