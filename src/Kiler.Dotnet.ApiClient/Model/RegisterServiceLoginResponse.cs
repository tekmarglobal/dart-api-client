/*
 * Kiler API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kiler.Dotnet.ApiClient.Client.OpenAPIDateConverter;

namespace Kiler.Dotnet.ApiClient.Model
{
    /// <summary>
    /// RegisterServiceLoginResponse
    /// </summary>
    [DataContract(Name = "RegisterServiceLoginResponse")]
    public partial class RegisterServiceLoginResponse : IEquatable<RegisterServiceLoginResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterServiceLoginResponse" /> class.
        /// </summary>
        /// <param name="token">token.</param>
        /// <param name="customerId">customerId.</param>
        /// <param name="registered">registered.</param>
        /// <param name="versionResponse">versionResponse.</param>
        public RegisterServiceLoginResponse(string token = default(string), int? customerId = default(int?), bool registered = default(bool), RegisterServiceVersionResponse versionResponse = default(RegisterServiceVersionResponse))
        {
            this.Token = token;
            this.CustomerId = customerId;
            this.Registered = registered;
            this.VersionResponse = versionResponse;
        }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", EmitDefaultValue = true)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name = "customerId", EmitDefaultValue = true)]
        public int? CustomerId { get; set; }

        /// <summary>
        /// Gets or Sets Registered
        /// </summary>
        [DataMember(Name = "registered", EmitDefaultValue = true)]
        public bool Registered { get; set; }

        /// <summary>
        /// Gets or Sets FirebaseToken
        /// </summary>
        [DataMember(Name = "firebaseToken", EmitDefaultValue = true)]
        public string FirebaseToken { get; private set; }

        /// <summary>
        /// Returns false as FirebaseToken should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFirebaseToken()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets VersionResponse
        /// </summary>
        [DataMember(Name = "versionResponse", EmitDefaultValue = false)]
        public RegisterServiceVersionResponse VersionResponse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegisterServiceLoginResponse {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  Registered: ").Append(Registered).Append("\n");
            sb.Append("  FirebaseToken: ").Append(FirebaseToken).Append("\n");
            sb.Append("  VersionResponse: ").Append(VersionResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisterServiceLoginResponse);
        }

        /// <summary>
        /// Returns true if RegisterServiceLoginResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterServiceLoginResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterServiceLoginResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.Registered == input.Registered ||
                    this.Registered.Equals(input.Registered)
                ) && 
                (
                    this.FirebaseToken == input.FirebaseToken ||
                    (this.FirebaseToken != null &&
                    this.FirebaseToken.Equals(input.FirebaseToken))
                ) && 
                (
                    this.VersionResponse == input.VersionResponse ||
                    (this.VersionResponse != null &&
                    this.VersionResponse.Equals(input.VersionResponse))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.CustomerId != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Registered.GetHashCode();
                if (this.FirebaseToken != null)
                {
                    hashCode = (hashCode * 59) + this.FirebaseToken.GetHashCode();
                }
                if (this.VersionResponse != null)
                {
                    hashCode = (hashCode * 59) + this.VersionResponse.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
