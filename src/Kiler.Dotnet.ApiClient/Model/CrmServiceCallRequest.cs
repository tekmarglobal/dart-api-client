/*
 * Kiler API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kiler.Dotnet.ApiClient.Client.OpenAPIDateConverter;

namespace Kiler.Dotnet.ApiClient.Model
{
    /// <summary>
    /// CrmServiceCallRequest
    /// </summary>
    [DataContract(Name = "CrmServiceCallRequest")]
    public partial class CrmServiceCallRequest : IEquatable<CrmServiceCallRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrmServiceCallRequest" /> class.
        /// </summary>
        /// <param name="extention">extention.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        public CrmServiceCallRequest(string extention = default(string), string phoneNumber = default(string))
        {
            this.Extention = extention;
            this.PhoneNumber = phoneNumber;
        }

        /// <summary>
        /// Gets or Sets Extention
        /// </summary>
        [DataMember(Name = "extention", EmitDefaultValue = false)]
        public string Extention { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CrmServiceCallRequest {\n");
            sb.Append("  Extention: ").Append(Extention).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CrmServiceCallRequest);
        }

        /// <summary>
        /// Returns true if CrmServiceCallRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CrmServiceCallRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CrmServiceCallRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Extention == input.Extention ||
                    (this.Extention != null &&
                    this.Extention.Equals(input.Extention))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Extention != null)
                {
                    hashCode = (hashCode * 59) + this.Extention.GetHashCode();
                }
                if (this.PhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumber.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
