/*
 * Kiler API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kiler.Dotnet.ApiClient.Client.OpenAPIDateConverter;

namespace Kiler.Dotnet.ApiClient.Model
{
    /// <summary>
    /// DefinitionServiceSelfPickupPoint
    /// </summary>
    [DataContract(Name = "DefinitionServiceSelfPickupPoint")]
    public partial class DefinitionServiceSelfPickupPoint : IEquatable<DefinitionServiceSelfPickupPoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DefinitionServiceSelfPickupPoint" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="regionId">regionId.</param>
        /// <param name="cityId">cityId.</param>
        /// <param name="countryId">countryId.</param>
        /// <param name="neighborhoodId">neighborhoodId.</param>
        /// <param name="depotAddress">depotAddress.</param>
        public DefinitionServiceSelfPickupPoint(string name = default(string), double latitude = default(double), double longitude = default(double), int regionId = default(int), int cityId = default(int), int countryId = default(int), int neighborhoodId = default(int), string depotAddress = default(string))
        {
            this.Name = name;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.RegionId = regionId;
            this.CityId = cityId;
            this.CountryId = countryId;
            this.NeighborhoodId = neighborhoodId;
            this.DepotAddress = depotAddress;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name = "latitude", EmitDefaultValue = false)]
        public double Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name = "longitude", EmitDefaultValue = false)]
        public double Longitude { get; set; }

        /// <summary>
        /// Gets or Sets RegionId
        /// </summary>
        [DataMember(Name = "regionId", EmitDefaultValue = false)]
        public int RegionId { get; set; }

        /// <summary>
        /// Gets or Sets CityId
        /// </summary>
        [DataMember(Name = "cityId", EmitDefaultValue = false)]
        public int CityId { get; set; }

        /// <summary>
        /// Gets or Sets CountryId
        /// </summary>
        [DataMember(Name = "countryId", EmitDefaultValue = false)]
        public int CountryId { get; set; }

        /// <summary>
        /// Gets or Sets NeighborhoodId
        /// </summary>
        [DataMember(Name = "neighborhoodId", EmitDefaultValue = false)]
        public int NeighborhoodId { get; set; }

        /// <summary>
        /// Gets or Sets DepotAddress
        /// </summary>
        [DataMember(Name = "depotAddress", EmitDefaultValue = true)]
        public string DepotAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DefinitionServiceSelfPickupPoint {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  RegionId: ").Append(RegionId).Append("\n");
            sb.Append("  CityId: ").Append(CityId).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  NeighborhoodId: ").Append(NeighborhoodId).Append("\n");
            sb.Append("  DepotAddress: ").Append(DepotAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DefinitionServiceSelfPickupPoint);
        }

        /// <summary>
        /// Returns true if DefinitionServiceSelfPickupPoint instances are equal
        /// </summary>
        /// <param name="input">Instance of DefinitionServiceSelfPickupPoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DefinitionServiceSelfPickupPoint input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    this.Latitude.Equals(input.Latitude)
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    this.Longitude.Equals(input.Longitude)
                ) && 
                (
                    this.RegionId == input.RegionId ||
                    this.RegionId.Equals(input.RegionId)
                ) && 
                (
                    this.CityId == input.CityId ||
                    this.CityId.Equals(input.CityId)
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    this.CountryId.Equals(input.CountryId)
                ) && 
                (
                    this.NeighborhoodId == input.NeighborhoodId ||
                    this.NeighborhoodId.Equals(input.NeighborhoodId)
                ) && 
                (
                    this.DepotAddress == input.DepotAddress ||
                    (this.DepotAddress != null &&
                    this.DepotAddress.Equals(input.DepotAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                hashCode = (hashCode * 59) + this.RegionId.GetHashCode();
                hashCode = (hashCode * 59) + this.CityId.GetHashCode();
                hashCode = (hashCode * 59) + this.CountryId.GetHashCode();
                hashCode = (hashCode * 59) + this.NeighborhoodId.GetHashCode();
                if (this.DepotAddress != null)
                {
                    hashCode = (hashCode * 59) + this.DepotAddress.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
