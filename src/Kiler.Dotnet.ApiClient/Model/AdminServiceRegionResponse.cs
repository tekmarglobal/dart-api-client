/*
 * Kiler API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kiler.Dotnet.ApiClient.Client.OpenAPIDateConverter;

namespace Kiler.Dotnet.ApiClient.Model
{
    /// <summary>
    /// AdminServiceRegionResponse
    /// </summary>
    [DataContract(Name = "AdminServiceRegionResponse")]
    public partial class AdminServiceRegionResponse : IEquatable<AdminServiceRegionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminServiceRegionResponse" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="code">code.</param>
        /// <param name="freeDelivery">freeDelivery.</param>
        /// <param name="freeDeliveryAmount">freeDeliveryAmount.</param>
        /// <param name="timeSlotGenerationWindow">timeSlotGenerationWindow.</param>
        /// <param name="lastTimeSlotGeneratedDate">lastTimeSlotGeneratedDate.</param>
        /// <param name="minimunCartAmount">minimunCartAmount.</param>
        /// <param name="regionMail">regionMail.</param>
        /// <param name="active">active.</param>
        /// <param name="neighborhoods">neighborhoods.</param>
        public AdminServiceRegionResponse(int id = default(int), string name = default(string), string code = default(string), bool freeDelivery = default(bool), double freeDeliveryAmount = default(double), int timeSlotGenerationWindow = default(int), DateTime lastTimeSlotGeneratedDate = default(DateTime), double minimunCartAmount = default(double), string regionMail = default(string), bool active = default(bool), List<AdminServiceAdminNeighborResponse> neighborhoods = default(List<AdminServiceAdminNeighborResponse>))
        {
            this.Id = id;
            this.Name = name;
            this.Code = code;
            this.FreeDelivery = freeDelivery;
            this.FreeDeliveryAmount = freeDeliveryAmount;
            this.TimeSlotGenerationWindow = timeSlotGenerationWindow;
            this.LastTimeSlotGeneratedDate = lastTimeSlotGeneratedDate;
            this.MinimunCartAmount = minimunCartAmount;
            this.RegionMail = regionMail;
            this.Active = active;
            this.Neighborhoods = neighborhoods;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets FreeDelivery
        /// </summary>
        [DataMember(Name = "freeDelivery", EmitDefaultValue = true)]
        public bool FreeDelivery { get; set; }

        /// <summary>
        /// Gets or Sets FreeDeliveryAmount
        /// </summary>
        [DataMember(Name = "freeDeliveryAmount", EmitDefaultValue = false)]
        public double FreeDeliveryAmount { get; set; }

        /// <summary>
        /// Gets or Sets TimeSlotGenerationWindow
        /// </summary>
        [DataMember(Name = "timeSlotGenerationWindow", EmitDefaultValue = false)]
        public int TimeSlotGenerationWindow { get; set; }

        /// <summary>
        /// Gets or Sets LastTimeSlotGeneratedDate
        /// </summary>
        [DataMember(Name = "lastTimeSlotGeneratedDate", EmitDefaultValue = false)]
        public DateTime LastTimeSlotGeneratedDate { get; set; }

        /// <summary>
        /// Gets or Sets MinimunCartAmount
        /// </summary>
        [DataMember(Name = "minimunCartAmount", EmitDefaultValue = false)]
        public double MinimunCartAmount { get; set; }

        /// <summary>
        /// Gets or Sets RegionMail
        /// </summary>
        [DataMember(Name = "regionMail", EmitDefaultValue = false)]
        public string RegionMail { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets Neighborhoods
        /// </summary>
        [DataMember(Name = "neighborhoods", EmitDefaultValue = false)]
        public List<AdminServiceAdminNeighborResponse> Neighborhoods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdminServiceRegionResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  FreeDelivery: ").Append(FreeDelivery).Append("\n");
            sb.Append("  FreeDeliveryAmount: ").Append(FreeDeliveryAmount).Append("\n");
            sb.Append("  TimeSlotGenerationWindow: ").Append(TimeSlotGenerationWindow).Append("\n");
            sb.Append("  LastTimeSlotGeneratedDate: ").Append(LastTimeSlotGeneratedDate).Append("\n");
            sb.Append("  MinimunCartAmount: ").Append(MinimunCartAmount).Append("\n");
            sb.Append("  RegionMail: ").Append(RegionMail).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Neighborhoods: ").Append(Neighborhoods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdminServiceRegionResponse);
        }

        /// <summary>
        /// Returns true if AdminServiceRegionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AdminServiceRegionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminServiceRegionResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.FreeDelivery == input.FreeDelivery ||
                    this.FreeDelivery.Equals(input.FreeDelivery)
                ) && 
                (
                    this.FreeDeliveryAmount == input.FreeDeliveryAmount ||
                    this.FreeDeliveryAmount.Equals(input.FreeDeliveryAmount)
                ) && 
                (
                    this.TimeSlotGenerationWindow == input.TimeSlotGenerationWindow ||
                    this.TimeSlotGenerationWindow.Equals(input.TimeSlotGenerationWindow)
                ) && 
                (
                    this.LastTimeSlotGeneratedDate == input.LastTimeSlotGeneratedDate ||
                    (this.LastTimeSlotGeneratedDate != null &&
                    this.LastTimeSlotGeneratedDate.Equals(input.LastTimeSlotGeneratedDate))
                ) && 
                (
                    this.MinimunCartAmount == input.MinimunCartAmount ||
                    this.MinimunCartAmount.Equals(input.MinimunCartAmount)
                ) && 
                (
                    this.RegionMail == input.RegionMail ||
                    (this.RegionMail != null &&
                    this.RegionMail.Equals(input.RegionMail))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.Neighborhoods == input.Neighborhoods ||
                    this.Neighborhoods != null &&
                    input.Neighborhoods != null &&
                    this.Neighborhoods.SequenceEqual(input.Neighborhoods)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FreeDelivery.GetHashCode();
                hashCode = (hashCode * 59) + this.FreeDeliveryAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.TimeSlotGenerationWindow.GetHashCode();
                if (this.LastTimeSlotGeneratedDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastTimeSlotGeneratedDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MinimunCartAmount.GetHashCode();
                if (this.RegionMail != null)
                {
                    hashCode = (hashCode * 59) + this.RegionMail.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.Neighborhoods != null)
                {
                    hashCode = (hashCode * 59) + this.Neighborhoods.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
