/*
 * Kiler API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kiler.Dotnet.ApiClient.Client.OpenAPIDateConverter;

namespace Kiler.Dotnet.ApiClient.Model
{
    /// <summary>
    /// CartServiceUpdateCartRequest
    /// </summary>
    [DataContract(Name = "CartServiceUpdateCartRequest")]
    public partial class CartServiceUpdateCartRequest : IEquatable<CartServiceUpdateCartRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartServiceUpdateCartRequest" /> class.
        /// </summary>
        /// <param name="region">region.</param>
        /// <param name="productId">productId.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="cartNote">cartNote.</param>
        /// <param name="productNote">productNote.</param>
        public CartServiceUpdateCartRequest(int region = default(int), int productId = default(int), double quantity = default(double), string cartNote = default(string), string productNote = default(string))
        {
            this.Region = region;
            this.ProductId = productId;
            this.Quantity = quantity;
            this.CartNote = cartNote;
            this.ProductNote = productNote;
        }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public int Region { get; set; }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name = "productId", EmitDefaultValue = false)]
        public int ProductId { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public double Quantity { get; set; }

        /// <summary>
        /// Gets or Sets CartNote
        /// </summary>
        [DataMember(Name = "cartNote", EmitDefaultValue = true)]
        public string CartNote { get; set; }

        /// <summary>
        /// Gets or Sets ProductNote
        /// </summary>
        [DataMember(Name = "productNote", EmitDefaultValue = true)]
        public string ProductNote { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CartServiceUpdateCartRequest {\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  CartNote: ").Append(CartNote).Append("\n");
            sb.Append("  ProductNote: ").Append(ProductNote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartServiceUpdateCartRequest);
        }

        /// <summary>
        /// Returns true if CartServiceUpdateCartRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CartServiceUpdateCartRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartServiceUpdateCartRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Region == input.Region ||
                    this.Region.Equals(input.Region)
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    this.ProductId.Equals(input.ProductId)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.CartNote == input.CartNote ||
                    (this.CartNote != null &&
                    this.CartNote.Equals(input.CartNote))
                ) && 
                (
                    this.ProductNote == input.ProductNote ||
                    (this.ProductNote != null &&
                    this.ProductNote.Equals(input.ProductNote))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Region.GetHashCode();
                hashCode = (hashCode * 59) + this.ProductId.GetHashCode();
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                if (this.CartNote != null)
                {
                    hashCode = (hashCode * 59) + this.CartNote.GetHashCode();
                }
                if (this.ProductNote != null)
                {
                    hashCode = (hashCode * 59) + this.ProductNote.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
