/*
 * Kiler API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kiler.Dotnet.ApiClient.Client.OpenAPIDateConverter;

namespace Kiler.Dotnet.ApiClient.Model
{
    /// <summary>
    /// CustomerServiceCustomerAddressRequest
    /// </summary>
    [DataContract(Name = "CustomerServiceCustomerAddressRequest")]
    public partial class CustomerServiceCustomerAddressRequest : IEquatable<CustomerServiceCustomerAddressRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerServiceCustomerAddressRequest" /> class.
        /// </summary>
        /// <param name="adressId">adressId.</param>
        /// <param name="name">name.</param>
        /// <param name="active">active.</param>
        /// <param name="neighborhood">neighborhood.</param>
        /// <param name="building">building.</param>
        /// <param name="floor">floor.</param>
        /// <param name="door">door.</param>
        /// <param name="postalCode">postalCode.</param>
        /// <param name="description">description.</param>
        /// <param name="customerName">customerName.</param>
        /// <param name="customerSurname">customerSurname.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="street">street.</param>
        /// <param name="isindividual">isindividual.</param>
        /// <param name="companyName">companyName.</param>
        /// <param name="taxOffice">taxOffice.</param>
        /// <param name="taxNumber">taxNumber.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        public CustomerServiceCustomerAddressRequest(int adressId = default(int), string name = default(string), bool active = default(bool), int neighborhood = default(int), string building = default(string), string floor = default(string), string door = default(string), string postalCode = default(string), string description = default(string), string customerName = default(string), string customerSurname = default(string), double latitude = default(double), double longitude = default(double), string street = default(string), bool isindividual = default(bool), string companyName = default(string), string taxOffice = default(string), string taxNumber = default(string), string phoneNumber = default(string))
        {
            this.AdressId = adressId;
            this.Name = name;
            this.Active = active;
            this.Neighborhood = neighborhood;
            this.Building = building;
            this.Floor = floor;
            this.Door = door;
            this.PostalCode = postalCode;
            this.Description = description;
            this.CustomerName = customerName;
            this.CustomerSurname = customerSurname;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.Street = street;
            this.Isindividual = isindividual;
            this.CompanyName = companyName;
            this.TaxOffice = taxOffice;
            this.TaxNumber = taxNumber;
            this.PhoneNumber = phoneNumber;
        }

        /// <summary>
        /// Gets or Sets AdressId
        /// </summary>
        [DataMember(Name = "adressId", EmitDefaultValue = false)]
        public int AdressId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets Neighborhood
        /// </summary>
        [DataMember(Name = "neighborhood", EmitDefaultValue = false)]
        public int Neighborhood { get; set; }

        /// <summary>
        /// Gets or Sets Building
        /// </summary>
        [DataMember(Name = "building", EmitDefaultValue = false)]
        public string Building { get; set; }

        /// <summary>
        /// Gets or Sets Floor
        /// </summary>
        [DataMember(Name = "floor", EmitDefaultValue = false)]
        public string Floor { get; set; }

        /// <summary>
        /// Gets or Sets Door
        /// </summary>
        [DataMember(Name = "door", EmitDefaultValue = false)]
        public string Door { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name = "postalCode", EmitDefaultValue = false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CustomerName
        /// </summary>
        [DataMember(Name = "customerName", EmitDefaultValue = false)]
        public string CustomerName { get; set; }

        /// <summary>
        /// Gets or Sets CustomerSurname
        /// </summary>
        [DataMember(Name = "customerSurname", EmitDefaultValue = false)]
        public string CustomerSurname { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name = "latitude", EmitDefaultValue = false)]
        public double Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name = "longitude", EmitDefaultValue = false)]
        public double Longitude { get; set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name = "street", EmitDefaultValue = false)]
        public string Street { get; set; }

        /// <summary>
        /// Gets or Sets Isindividual
        /// </summary>
        [DataMember(Name = "isindividual", EmitDefaultValue = true)]
        public bool Isindividual { get; set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name = "companyName", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets TaxOffice
        /// </summary>
        [DataMember(Name = "taxOffice", EmitDefaultValue = false)]
        public string TaxOffice { get; set; }

        /// <summary>
        /// Gets or Sets TaxNumber
        /// </summary>
        [DataMember(Name = "taxNumber", EmitDefaultValue = false)]
        public string TaxNumber { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerServiceCustomerAddressRequest {\n");
            sb.Append("  AdressId: ").Append(AdressId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Neighborhood: ").Append(Neighborhood).Append("\n");
            sb.Append("  Building: ").Append(Building).Append("\n");
            sb.Append("  Floor: ").Append(Floor).Append("\n");
            sb.Append("  Door: ").Append(Door).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  CustomerSurname: ").Append(CustomerSurname).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Isindividual: ").Append(Isindividual).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  TaxOffice: ").Append(TaxOffice).Append("\n");
            sb.Append("  TaxNumber: ").Append(TaxNumber).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerServiceCustomerAddressRequest);
        }

        /// <summary>
        /// Returns true if CustomerServiceCustomerAddressRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerServiceCustomerAddressRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerServiceCustomerAddressRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdressId == input.AdressId ||
                    this.AdressId.Equals(input.AdressId)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.Neighborhood == input.Neighborhood ||
                    this.Neighborhood.Equals(input.Neighborhood)
                ) && 
                (
                    this.Building == input.Building ||
                    (this.Building != null &&
                    this.Building.Equals(input.Building))
                ) && 
                (
                    this.Floor == input.Floor ||
                    (this.Floor != null &&
                    this.Floor.Equals(input.Floor))
                ) && 
                (
                    this.Door == input.Door ||
                    (this.Door != null &&
                    this.Door.Equals(input.Door))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CustomerName == input.CustomerName ||
                    (this.CustomerName != null &&
                    this.CustomerName.Equals(input.CustomerName))
                ) && 
                (
                    this.CustomerSurname == input.CustomerSurname ||
                    (this.CustomerSurname != null &&
                    this.CustomerSurname.Equals(input.CustomerSurname))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    this.Latitude.Equals(input.Latitude)
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    this.Longitude.Equals(input.Longitude)
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.Isindividual == input.Isindividual ||
                    this.Isindividual.Equals(input.Isindividual)
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.TaxOffice == input.TaxOffice ||
                    (this.TaxOffice != null &&
                    this.TaxOffice.Equals(input.TaxOffice))
                ) && 
                (
                    this.TaxNumber == input.TaxNumber ||
                    (this.TaxNumber != null &&
                    this.TaxNumber.Equals(input.TaxNumber))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AdressId.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                hashCode = (hashCode * 59) + this.Neighborhood.GetHashCode();
                if (this.Building != null)
                {
                    hashCode = (hashCode * 59) + this.Building.GetHashCode();
                }
                if (this.Floor != null)
                {
                    hashCode = (hashCode * 59) + this.Floor.GetHashCode();
                }
                if (this.Door != null)
                {
                    hashCode = (hashCode * 59) + this.Door.GetHashCode();
                }
                if (this.PostalCode != null)
                {
                    hashCode = (hashCode * 59) + this.PostalCode.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.CustomerName != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerName.GetHashCode();
                }
                if (this.CustomerSurname != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerSurname.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                if (this.Street != null)
                {
                    hashCode = (hashCode * 59) + this.Street.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Isindividual.GetHashCode();
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                if (this.TaxOffice != null)
                {
                    hashCode = (hashCode * 59) + this.TaxOffice.GetHashCode();
                }
                if (this.TaxNumber != null)
                {
                    hashCode = (hashCode * 59) + this.TaxNumber.GetHashCode();
                }
                if (this.PhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumber.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
