/*
 * Kiler API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kiler.Dotnet.ApiClient.Client.OpenAPIDateConverter;

namespace Kiler.Dotnet.ApiClient.Model
{
    /// <summary>
    /// RegisterServiceVerifyRequest
    /// </summary>
    [DataContract(Name = "RegisterServiceVerifyRequest")]
    public partial class RegisterServiceVerifyRequest : IEquatable<RegisterServiceVerifyRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterServiceVerifyRequest" /> class.
        /// </summary>
        /// <param name="phone">phone.</param>
        /// <param name="smsCode">smsCode.</param>
        public RegisterServiceVerifyRequest(string phone = default(string), string smsCode = default(string))
        {
            this.Phone = phone;
            this.SmsCode = smsCode;
        }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets SmsCode
        /// </summary>
        [DataMember(Name = "smsCode", EmitDefaultValue = false)]
        public string SmsCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegisterServiceVerifyRequest {\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  SmsCode: ").Append(SmsCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisterServiceVerifyRequest);
        }

        /// <summary>
        /// Returns true if RegisterServiceVerifyRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterServiceVerifyRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterServiceVerifyRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.SmsCode == input.SmsCode ||
                    (this.SmsCode != null &&
                    this.SmsCode.Equals(input.SmsCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.SmsCode != null)
                {
                    hashCode = (hashCode * 59) + this.SmsCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
