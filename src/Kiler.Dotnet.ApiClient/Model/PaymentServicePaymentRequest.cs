/*
 * Kiler API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Kiler.Dotnet.ApiClient.Client.OpenAPIDateConverter;

namespace Kiler.Dotnet.ApiClient.Model
{
    /// <summary>
    /// PaymentServicePaymentRequest
    /// </summary>
    [DataContract(Name = "PaymentServicePaymentRequest")]
    public partial class PaymentServicePaymentRequest : IEquatable<PaymentServicePaymentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentServicePaymentRequest" /> class.
        /// </summary>
        /// <param name="cartNumber">cartNumber.</param>
        /// <param name="expiryDate">expiryDate.</param>
        /// <param name="cartCvv">cartCvv.</param>
        /// <param name="posId">posId.</param>
        /// <param name="amount">amount.</param>
        /// <param name="use3dSecure">use3dSecure.</param>
        /// <param name="transactionUid">transactionUid.</param>
        /// <param name="cardType">cardType.</param>
        public PaymentServicePaymentRequest(string cartNumber = default(string), string expiryDate = default(string), string cartCvv = default(string), int posId = default(int), double amount = default(double), bool use3dSecure = default(bool), string transactionUid = default(string), int cardType = default(int))
        {
            this.CartNumber = cartNumber;
            this.ExpiryDate = expiryDate;
            this.CartCvv = cartCvv;
            this.PosId = posId;
            this.Amount = amount;
            this.Use3dSecure = use3dSecure;
            this.TransactionUid = transactionUid;
            this.CardType = cardType;
        }

        /// <summary>
        /// Gets or Sets CartNumber
        /// </summary>
        [DataMember(Name = "cartNumber", EmitDefaultValue = false)]
        public string CartNumber { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryDate
        /// </summary>
        [DataMember(Name = "expiryDate", EmitDefaultValue = false)]
        public string ExpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets CartCvv
        /// </summary>
        [DataMember(Name = "cartCvv", EmitDefaultValue = false)]
        public string CartCvv { get; set; }

        /// <summary>
        /// Gets or Sets PosId
        /// </summary>
        [DataMember(Name = "posId", EmitDefaultValue = false)]
        public int PosId { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public double Amount { get; set; }

        /// <summary>
        /// Gets or Sets Use3dSecure
        /// </summary>
        [DataMember(Name = "use3dSecure", EmitDefaultValue = true)]
        public bool Use3dSecure { get; set; }

        /// <summary>
        /// Gets or Sets TransactionUid
        /// </summary>
        [DataMember(Name = "transactionUid", EmitDefaultValue = false)]
        public string TransactionUid { get; set; }

        /// <summary>
        /// Gets or Sets CardType
        /// </summary>
        [DataMember(Name = "cardType", EmitDefaultValue = false)]
        public int CardType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentServicePaymentRequest {\n");
            sb.Append("  CartNumber: ").Append(CartNumber).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  CartCvv: ").Append(CartCvv).Append("\n");
            sb.Append("  PosId: ").Append(PosId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Use3dSecure: ").Append(Use3dSecure).Append("\n");
            sb.Append("  TransactionUid: ").Append(TransactionUid).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentServicePaymentRequest);
        }

        /// <summary>
        /// Returns true if PaymentServicePaymentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentServicePaymentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentServicePaymentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CartNumber == input.CartNumber ||
                    (this.CartNumber != null &&
                    this.CartNumber.Equals(input.CartNumber))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.CartCvv == input.CartCvv ||
                    (this.CartCvv != null &&
                    this.CartCvv.Equals(input.CartCvv))
                ) && 
                (
                    this.PosId == input.PosId ||
                    this.PosId.Equals(input.PosId)
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Use3dSecure == input.Use3dSecure ||
                    this.Use3dSecure.Equals(input.Use3dSecure)
                ) && 
                (
                    this.TransactionUid == input.TransactionUid ||
                    (this.TransactionUid != null &&
                    this.TransactionUid.Equals(input.TransactionUid))
                ) && 
                (
                    this.CardType == input.CardType ||
                    this.CardType.Equals(input.CardType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CartNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CartNumber.GetHashCode();
                }
                if (this.ExpiryDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiryDate.GetHashCode();
                }
                if (this.CartCvv != null)
                {
                    hashCode = (hashCode * 59) + this.CartCvv.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PosId.GetHashCode();
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                hashCode = (hashCode * 59) + this.Use3dSecure.GetHashCode();
                if (this.TransactionUid != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionUid.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CardType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
