/*
 * Kiler API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Kiler.Dotnet.ApiClient.Client;
using Kiler.Dotnet.ApiClient.Api;
// uncomment below to import models
//using Kiler.Dotnet.ApiClient.Model;

namespace Kiler.Dotnet.ApiClient.Test.Api
{
    /// <summary>
    ///  Class for testing CatalogApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CatalogApiTests : IDisposable
    {
        private CatalogApi instance;

        public CatalogApiTests()
        {
            instance = new CatalogApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CatalogApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CatalogApi
            //Assert.IsType<CatalogApi>(instance);
        }

        /// <summary>
        /// Test ApiCatalogAllCategoriesGet
        /// </summary>
        [Fact]
        public void ApiCatalogAllCategoriesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiCatalogAllCategoriesGet();
            //Assert.IsType<RestResultOfCatalogServiceRCategory>(response);
        }

        /// <summary>
        /// Test ApiCatalogAllCategoriesRegionGet
        /// </summary>
        [Fact]
        public void ApiCatalogAllCategoriesRegionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? neighborhood = null;
            //var response = instance.ApiCatalogAllCategoriesRegionGet(neighborhood);
            //Assert.IsType<RestResultOfCatalogServiceRCategory>(response);
        }

        /// <summary>
        /// Test ApiCatalogAllCategoriesRegionProductsIDGet
        /// </summary>
        [Fact]
        public void ApiCatalogAllCategoriesRegionProductsIDGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? neighborhood = null;
            //var response = instance.ApiCatalogAllCategoriesRegionProductsIDGet(neighborhood);
            //Assert.IsType<List<int>>(response);
        }

        /// <summary>
        /// Test ApiCatalogCreateCategoryPost
        /// </summary>
        [Fact]
        public void ApiCatalogCreateCategoryPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //int? parent = null;
            //int? level = null;
            //bool? showInMenu = null;
            //var response = instance.ApiCatalogCreateCategoryPost(name, parent, level, showInMenu);
            //Assert.IsType<RestResultOfCatalogServiceRCategory>(response);
        }

        /// <summary>
        /// Test ApiCatalogDeleteCategoryDelete
        /// </summary>
        [Fact]
        public void ApiCatalogDeleteCategoryDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.ApiCatalogDeleteCategoryDelete(id);
            //Assert.IsType<RestResultOfCatalogServiceRCategory>(response);
        }

        /// <summary>
        /// Test ApiCatalogGetNeighborhoodCatalogGet
        /// </summary>
        [Fact]
        public void ApiCatalogGetNeighborhoodCatalogGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? neighborhood = null;
            //var response = instance.ApiCatalogGetNeighborhoodCatalogGet(neighborhood);
            //Assert.IsType<RestResultOfCatalogServiceRCategory>(response);
        }

        /// <summary>
        /// Test ApiCatalogGetRegionCatalogGet
        /// </summary>
        [Fact]
        public void ApiCatalogGetRegionCatalogGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? region = null;
            //var response = instance.ApiCatalogGetRegionCatalogGet(region);
            //Assert.IsType<RestResultOfCatalogServiceRCategory>(response);
        }

        /// <summary>
        /// Test ApiCatalogImportCategoriesFromOlimposPost
        /// </summary>
        [Fact]
        public void ApiCatalogImportCategoriesFromOlimposPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.ApiCatalogImportCategoriesFromOlimposPost();
        }

        /// <summary>
        /// Test ApiCatalogPost
        /// </summary>
        [Fact]
        public void ApiCatalogPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? categoryId = null;
            //int? regionId = null;
            //bool? withProducts = null;
            //int? nestingLevel = null;
            //var response = instance.ApiCatalogPost(categoryId, regionId, withProducts, nestingLevel);
            //Assert.IsType<RestResultOfCatalogServiceRCategory>(response);
        }

        /// <summary>
        /// Test ApiCatalogUpdateCategoryPut
        /// </summary>
        [Fact]
        public void ApiCatalogUpdateCategoryPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string name = null;
            //int? parent = null;
            //int? level = null;
            //var response = instance.ApiCatalogUpdateCategoryPut(id, name, parent, level);
            //Assert.IsType<RestResultOfCatalogServiceRCategory>(response);
        }
    }
}
